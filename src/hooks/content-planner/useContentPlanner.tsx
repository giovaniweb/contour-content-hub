
import { useState, useEffect } from 'react';
import { ContentPlannerFilter, ContentPlannerItem, ContentPlannerStatus, ContentFormat, ContentDistribution } from '@/types/content-planner';
import { initialColumns } from './initialState';
import { toast } from "sonner";

// Exemplo de dados mocados para o Content Planner
const mockItems: ContentPlannerItem[] = [
  {
    id: 'item-1',
    title: 'Video tutorial sobre tratamento facial',
    description: 'V√≠deo explicativo sobre os benef√≠cios do tratamento facial com √°cido hialur√¥nico',
    status: 'idea',
    tags: ['facial', 'tutorial', '√°cido'],
    format: 'v√≠deo',
    objective: 'üü° Atrair Aten√ß√£o',
    distribution: 'Instagram',
    authorId: 'user-1',
    authorName: 'Dr. Silva',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    aiGenerated: false
  },
  {
    id: 'item-2',
    title: 'Benef√≠cios do lifting facial',
    description: 'Conte√∫do sobre os principais benef√≠cios do lifting facial n√£o cir√∫rgico',
    status: 'script_generated',
    tags: ['facial', 'lifting', 'rejuvenescimento'],
    scriptId: 'script-123',
    format: 'reels',
    objective: 'üü° Atrair Aten√ß√£o',
    distribution: 'Instagram',
    authorId: 'user-1',
    authorName: 'Dr. Silva',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    aiGenerated: true
  },
  {
    id: 'item-3',
    title: 'Como funciona o botox preventivo?',
    description: 'Explica√ß√£o detalhada sobre o uso de botox para preven√ß√£o de rugas',
    status: 'approved',
    tags: ['botox', 'preven√ß√£o', 'rugas'],
    scriptId: 'script-456',
    format: 'v√≠deo',
    objective: 'üî¥ Fazer Comprar',
    distribution: 'YouTube',
    authorId: 'user-1',
    authorName: 'Dr. Silva',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    aiGenerated: false
  },
  {
    id: 'item-4',
    title: 'Aplica√ß√£o de preenchimento labial',
    description: 'Demonstra√ß√£o de aplica√ß√£o de preenchimento labial com √°cido hialur√¥nico',
    status: 'scheduled',
    tags: ['preenchimento', 'labial', 'procedimento'],
    scriptId: 'script-789',
    format: 'reels',
    objective: 'üü¢ Criar Conex√£o',
    distribution: 'TikTok',
    scheduledDate: new Date(Date.now() + 86400000).toISOString(),
    authorId: 'user-1',
    authorName: 'Dr. Silva',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    aiGenerated: false
  },
  {
    id: 'item-5',
    title: 'Compara√ß√£o entre procedimentos faciais',
    description: 'Infogr√°fico comparando diferentes procedimentos para rejuvenescimento facial',
    status: 'published',
    tags: ['facial', 'compara√ß√£o', 'rejuvenescimento'],
    format: 'carrossel',
    objective: 'üü° Atrair Aten√ß√£o',
    distribution: 'Instagram',
    authorId: 'user-1',
    authorName: 'Dr. Silva',
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    aiGenerated: false
  }
];

export const useContentPlanner = (initialFilters: ContentPlannerFilter = {}) => {
  const [columns, setColumns] = useState(initialColumns);
  const [items, setItems] = useState<ContentPlannerItem[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<ContentPlannerFilter>(initialFilters);
  const [autoRefresh, setAutoRefresh] = useState<boolean>(true);

  // Carregar dados iniciais
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        await new Promise(resolve => setTimeout(resolve, 800));
        setItems(mockItems);
        setError(null);
        
        toast.success("Planejador carregado", {
          description: "Dados atualizados com sucesso!"
        });
      } catch (err) {
        console.error("Erro ao carregar dados:", err);
        setError("Falha ao carregar os itens do planner");
        toast.error("Erro no planejador", {
          description: "N√£o foi poss√≠vel carregar os dados"
        });
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  // Auto-refresh a cada 30 segundos se ativo
  useEffect(() => {
    if (!autoRefresh) return;

    const interval = setInterval(() => {
      console.log("üîÑ Auto-refresh do planejador");
      // Simular pequenas atualiza√ß√µes
      setItems(prevItems => 
        prevItems.map(item => ({
          ...item,
          updatedAt: new Date().toISOString()
        }))
      );
    }, 30000);

    return () => clearInterval(interval);
  }, [autoRefresh]);

  // Atualizar colunas quando items mudam
  useEffect(() => {
    const updatedColumns = initialColumns.map(column => ({
      ...column,
      items: items.filter(item => item.status === column.id)
    }));
    setColumns(updatedColumns);
  }, [items]);

  // Adicionar item
  const addItem = async (newItem: Partial<ContentPlannerItem>): Promise<ContentPlannerItem | null> => {
    try {
      const item: ContentPlannerItem = {
        id: `item-${Date.now()}`,
        title: newItem.title || 'Novo conte√∫do',
        description: newItem.description || '',
        status: newItem.status || 'idea',
        tags: newItem.tags || [],
        format: (newItem.format || 'v√≠deo') as ContentFormat,
        objective: newItem.objective || 'üü° Atrair Aten√ß√£o',
        distribution: (newItem.distribution || 'Instagram') as ContentDistribution,
        authorId: newItem.authorId || 'user-1',
        authorName: newItem.authorName || 'Usu√°rio',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        aiGenerated: newItem.aiGenerated || false,
        ...(newItem.scriptId && { scriptId: newItem.scriptId }),
        ...(newItem.scheduledDate && { scheduledDate: newItem.scheduledDate })
      };

      await new Promise(resolve => setTimeout(resolve, 500));
      
      setItems(prevItems => [item, ...prevItems]);
      
      toast.success("‚ú® Item adicionado!", {
        description: `${item.title} foi adicionado ao planejador`
      });
      
      return item;
    } catch (err) {
      console.error("Erro ao adicionar item:", err);
      toast.error("‚ùå Erro ao adicionar", {
        description: "N√£o foi poss√≠vel adicionar o item"
      });
      return null;
    }
  };

  // Atualizar item
  const updateItem = async (id: string, updates: Partial<ContentPlannerItem>): Promise<ContentPlannerItem | null> => {
    try {
      await new Promise(resolve => setTimeout(resolve, 300));
      
      let updatedItem: ContentPlannerItem | null = null;
      
      setItems(prevItems => 
        prevItems.map(item => {
          if (item.id === id) {
            updatedItem = { ...item, ...updates, updatedAt: new Date().toISOString() };
            return updatedItem;
          }
          return item;
        })
      );
      
      if (updatedItem) {
        toast.success("‚úÖ Item atualizado!", {
          description: "Altera√ß√µes salvas com sucesso"
        });
      }
      
      return updatedItem;
    } catch (err) {
      console.error("Erro ao atualizar item:", err);
      toast.error("‚ùå Erro na atualiza√ß√£o", {
        description: "N√£o foi poss√≠vel salvar as altera√ß√µes"
      });
      return null;
    }
  };

  // Remover item
  const removeItem = async (id: string): Promise<boolean> => {
    try {
      await new Promise(resolve => setTimeout(resolve, 400));
      
      setItems(prevItems => prevItems.filter(item => item.id !== id));
      
      toast.success("üóëÔ∏è Item removido!", {
        description: "Item removido do planejador"
      });
      
      return true;
    } catch (err) {
      console.error("Erro ao remover item:", err);
      toast.error("‚ùå Erro ao remover", {
        description: "N√£o foi poss√≠vel remover o item"
      });
      return false;
    }
  };

  // Mover item de status
  const moveItem = async (id: string, targetStatus: ContentPlannerStatus): Promise<ContentPlannerItem | null> => {
    try {
      await new Promise(resolve => setTimeout(resolve, 200));
      
      let movedItem: ContentPlannerItem | null = null;
      
      setItems(prevItems => 
        prevItems.map(item => {
          if (item.id === id) {
            movedItem = { 
              ...item, 
              status: targetStatus, 
              updatedAt: new Date().toISOString() 
            };
            return movedItem;
          }
          return item;
        })
      );
      
      if (movedItem) {
        toast.success("üöÄ Item movido!", {
          description: `Status alterado para ${targetStatus}`
        });
      }
      
      return movedItem;
    } catch (err) {
      console.error("Erro ao mover item:", err);
      toast.error("‚ùå Erro ao mover", {
        description: "N√£o foi poss√≠vel alterar o status"
      });
      return null;
    }
  };

  // Gerar sugest√µes de conte√∫do com IA
  const generateSuggestions = async (count = 3, objective?: string, format?: string): Promise<ContentPlannerItem[]> => {
    try {
      setLoading(true);
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const suggestions: ContentPlannerItem[] = [];
      
      const topics = [
        "5 melhores tratamentos para rejuvenescimento facial em 2024",
        "Mitos e verdades sobre botox: o que voc√™ precisa saber",
        "Como escolher o preenchimento ideal para seu tipo de pele",
        "Cuidados p√≥s-procedimento: dicas essenciais para melhores resultados",
        "Tratamentos n√£o invasivos: alternativas ao lifting cir√∫rgico",
        "Harmoniza√ß√£o facial: t√©cnicas modernas e seguras",
        "Preven√ß√£o do envelhecimento: quando come√ßar os tratamentos",
        "Diferen√ßas entre √°cido hialur√¥nico e outros preenchedores"
      ];
      
      const randomTopics = [...topics].sort(() => 0.5 - Math.random()).slice(0, count);
      
      for (let i = 0; i < count; i++) {
        const formats: ContentFormat[] = ['v√≠deo', 'reels', 'carrossel', 'story'];
        const objectives = ['üü° Atrair Aten√ß√£o', 'üî¥ Fazer Comprar', 'üü¢ Criar Conex√£o'];
        
        const newItem: ContentPlannerItem = {
          id: `item-ai-${Date.now()}-${i}`,
          title: randomTopics[i] || `Sugest√£o IA: Conte√∫do ${i+1}`,
          description: "Conte√∫do gerado por IA baseado em tend√™ncias de mercado e dados de engajamento. Personalize conforme sua audi√™ncia.",
          status: 'idea',
          tags: ['ia', 'sugest√£o', 'trend', 'engajamento'],
          format: (format as ContentFormat) || formats[Math.floor(Math.random() * formats.length)],
          objective: objective || objectives[Math.floor(Math.random() * objectives.length)],
          distribution: 'Instagram' as ContentDistribution,
          authorId: 'ai-assistant',
          authorName: 'ü§ñ Assistente IA',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          aiGenerated: true
        };
        
        suggestions.push(newItem);
      }
      
      setItems(prevItems => [...suggestions, ...prevItems]);
      
      toast.success(`üéØ ${count} sugest√µes geradas!`, {
        description: "Novas ideias inteligentes adicionadas ao planejador"
      });
      
      return suggestions;
    } catch (err) {
      console.error("Erro ao gerar sugest√µes:", err);
      toast.error("‚ùå Erro na gera√ß√£o IA", {
        description: "N√£o foi poss√≠vel gerar sugest√µes autom√°ticas"
      });
      return [];
    } finally {
      setLoading(false);
    }
  };

  // Funcionalidade de sincroniza√ß√£o ativa
  const syncData = async () => {
    setLoading(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      toast.success("üîÑ Dados sincronizados!", {
        description: "Planejador atualizado com √∫ltimas altera√ß√µes"
      });
    } catch (err) {
      toast.error("‚ùå Erro na sincroniza√ß√£o");
    } finally {
      setLoading(false);
    }
  };

  return {
    columns,
    items,
    loading,
    error,
    filters,
    autoRefresh,
    setFilters,
    setAutoRefresh,
    addItem,
    updateItem,
    removeItem,
    moveItem,
    generateSuggestions,
    syncData
  };
};
