
import { useState } from 'react';
import { useToast } from "@/hooks/use-toast";
import { supabase } from '@/integrations/supabase/client';

interface AIDiagnosticResult {
  diagnostic: string;
  success: boolean;
  error?: string;
}

export const useAIDiagnostic = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const generateDiagnostic = async (diagnosticData: any): Promise<string | null> => {
    console.log('ü§ñ useAIDiagnostic: Iniciando gera√ß√£o com IA');
    console.log('üìä Dados enviados para IA:', JSON.stringify(diagnosticData, null, 2));
    
    setIsGenerating(true);
    
    try {
      console.log('üöÄ Chamando edge function generate-marketing-diagnostic...');
      console.log('üîë Verificando se OPENAI_API_KEY est√° configurada...');
      
      // Aumentar timeout para 45 segundos para dar tempo para a IA processar
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout na chamada da IA - Tente novamente')), 45000);
      });

      const supabasePromise = supabase.functions.invoke('generate-marketing-diagnostic', {
        body: diagnosticData
      });

      const { data, error } = await Promise.race([supabasePromise, timeoutPromise]) as any;

      console.log('üì• Resposta COMPLETA da edge function:');
      console.log('üìÑ Data:', JSON.stringify(data, null, 2));
      console.log('‚ùå Error:', JSON.stringify(error, null, 2));

      if (error) {
        console.error('‚ùå ERRO na edge function:', error);
        
        // Verificar se √© erro de timeout espec√≠fico
        if (error.message?.includes('timeout') || error.message?.includes('FunctionsTimeout')) {
          throw new Error('A IA est√° demorando mais que o esperado. Tente novamente em alguns segundos.');
        }
        
        throw new Error(`Edge function error: ${JSON.stringify(error)}`);
      }

      if (!data) {
        console.error('‚ùå DADOS VAZIOS retornados da edge function');
        throw new Error('Dados vazios retornados da edge function');
      }

      // Verificar se √© uma resposta de sucesso da IA
      if (data.success === false) {
        console.error('‚ùå Edge function retornou sucesso = false');
        console.error('‚ùå Erro espec√≠fico:', data.error);
        console.error('‚ùå Detalhes:', data.details);
        
        // Tratar erros espec√≠ficos da OpenAI
        if (data.error?.includes('OPENAI_API_KEY')) {
          throw new Error('Chave da OpenAI n√£o configurada. Entre em contato com o suporte.');
        }
        
        throw new Error(data.error || 'Erro na gera√ß√£o do diagn√≥stico via IA');
      }

      if (!data.diagnostic || data.diagnostic.trim() === '') {
        console.error('‚ùå Diagn√≥stico vazio ou inv√°lido retornado pela IA');
        throw new Error('Diagn√≥stico vazio retornado pela IA');
      }

      console.log('‚úÖ SUCESSO! Diagn√≥stico IA gerado!');
      console.log('üìù Tamanho do diagn√≥stico:', data.diagnostic?.length || 0, 'caracteres');
      console.log('üéØ Primeiros 200 chars:', data.diagnostic?.substring(0, 200) + '...');

      toast({
        title: "üéØ Diagn√≥stico IA gerado!",
        description: "Sua an√°lise personalizada foi criada com sucesso usando OpenAI."
      });

      return data.diagnostic;
    } catch (error) {
      console.error('üí• ERRO COMPLETO ao gerar diagn√≥stico com IA:');
      console.error('üí• Error object:', error);
      console.error('üí• Error message:', error.message);
      console.error('üí• Error stack:', error.stack);
      
      // Mensagens de erro mais espec√≠ficas
      let errorMessage = 'OpenAI indispon√≠vel. Gerando com sistema local.';
      
      if (error.message?.includes('timeout') || error.message?.includes('Timeout')) {
        errorMessage = 'IA demorou para responder. Tente novamente.';
      } else if (error.message?.includes('OPENAI_API_KEY')) {
        errorMessage = 'Configura√ß√£o da OpenAI pendente.';
      } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
        errorMessage = 'Problema de conex√£o. Tente novamente.';
      }
      
      toast({
        variant: "destructive",
        title: "‚ö†Ô∏è IA temporariamente indispon√≠vel",
        description: errorMessage
      });
      
      // Retorna null para usar fallback
      return null;
    } finally {
      setIsGenerating(false);
    }
  };

  return {
    generateDiagnostic,
    isGenerating
  };
};
