
import { useState } from 'react';
import { useToast } from "@/hooks/use-toast";
import { supabase } from '@/integrations/supabase/client';

interface AIDiagnosticResult {
  diagnostic: string;
  success: boolean;
  error?: string;
}

export const useAIDiagnostic = () => {
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const generateDiagnostic = async (diagnosticData: any): Promise<string | null> => {
    console.log('ü§ñ useAIDiagnostic: Iniciando gera√ß√£o com IA');
    console.log('üìä Dados enviados para IA:', JSON.stringify(diagnosticData, null, 2));
    
    setIsGenerating(true);
    
    try {
      console.log('üöÄ Chamando edge function generate-marketing-diagnostic...');
      
      // Timeout de 75 segundos
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Timeout - IA demorou mais que 75 segundos')), 75000);
      });

      const supabasePromise = supabase.functions.invoke('generate-marketing-diagnostic', {
        body: diagnosticData
      });

      const { data, error } = await Promise.race([supabasePromise, timeoutPromise]) as any;

      console.log('üì• Resposta da edge function:');
      console.log('üìÑ Data:', data);
      console.log('‚ùå Error:', error);

      if (error) {
        console.error('‚ùå ERRO na edge function:', error);
        
        // Tratar diferentes tipos de erro
        if (error.message?.includes('timeout') || error.message?.includes('FunctionsTimeout')) {
          throw new Error('OpenAI demorou para processar. Tente novamente.');
        }
        
        if (error.message?.includes('OPENAI_API_KEY') || error.message?.includes('sk-')) {
          throw new Error('‚ùå Chave da OpenAI inv√°lida ou n√£o configurada. Verifique os secrets do Supabase.');
        }
        
        throw new Error(`Erro na IA: ${error.message || JSON.stringify(error)}`);
      }

      if (!data) {
        console.error('‚ùå Dados vazios da edge function');
        throw new Error('Resposta vazia da IA');
      }

      // Verificar se a resposta indica falha
      if (data.success === false) {
        console.error('‚ùå IA retornou erro:', data.error);
        
        if (data.error?.includes('OPENAI_API_KEY') || data.error?.includes('sk-')) {
          throw new Error('‚ùå Chave da OpenAI inv√°lida. Configure nos secrets do Supabase.');
        }
        
        if (data.error?.includes('Chave OpenAI inv√°lida')) {
          throw new Error('‚ùå Chave OpenAI inv√°lida ou sem permiss√£o. Verifique se est√° correta.');
        }
        
        throw new Error(data.error || 'Erro desconhecido na IA');
      }

      if (!data.diagnostic || data.diagnostic.trim() === '') {
        console.error('‚ùå Diagn√≥stico vazio da IA');
        throw new Error('IA retornou diagn√≥stico vazio');
      }

      console.log('‚úÖ SUCESSO! Diagn√≥stico IA gerado!');
      console.log('üìù Tamanho:', data.diagnostic.length, 'caracteres');

      toast({
        title: "üéØ Diagn√≥stico IA gerado!",
        description: "An√°lise personalizada criada com sucesso."
      });

      return data.diagnostic;
      
    } catch (error) {
      console.error('üí• ERRO ao gerar diagn√≥stico:', error);
      
      let errorMessage = 'IA temporariamente indispon√≠vel';
      
      if (error.message?.includes('Timeout') || error.message?.includes('timeout')) {
        errorMessage = 'IA demorou para responder. Tente novamente em alguns minutos.';
      } else if (error.message?.includes('OPENAI_API_KEY') || error.message?.includes('sk-') || error.message?.includes('Chave OpenAI')) {
        errorMessage = '‚ùå Chave da OpenAI n√£o configurada ou inv√°lida. Configure nos secrets do Supabase.';
      } else if (error.message?.includes('network') || error.message?.includes('fetch')) {
        errorMessage = 'Problema de conex√£o. Verifique sua internet.';
      }
      
      toast({
        variant: "destructive",
        title: "‚ö†Ô∏è Erro na IA",
        description: errorMessage
      });
      
      return null;
      
    } finally {
      setIsGenerating(false);
    }
  };

  return {
    generateDiagnostic,
    isGenerating
  };
};
