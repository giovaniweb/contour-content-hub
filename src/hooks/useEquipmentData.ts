
import { useState, useEffect } from 'react';
import { Equipment } from '@/types/equipment';
import { getEquipmentById } from '@/utils/api-equipment';

export const useEquipmentData = () => {
  const [equipments, setEquipments] = useState<Equipment[]>([]);
  const [loading, setLoading] = useState(false);

  const getEquipmentDetails = async (equipmentNames: string[]): Promise<Equipment[]> => {
    if (!equipmentNames.length) return [];
    
    console.log('üîß [useEquipmentData] Buscando equipamentos:', equipmentNames);
    
    setLoading(true);
    try {
      // Buscar equipamentos por nome exato - SEM SUBSTITUI√á√ïES
      const equipmentPromises = equipmentNames.map(async (name) => {
        console.log(`üîç [useEquipmentData] Processando equipamento: "${name}"`);
        
        try {
          // Tentar buscar por ID primeiro
          const equipment = await getEquipmentById(name);
          console.log(`‚úÖ [useEquipmentData] Encontrado por ID: ${name}`, equipment);
          return equipment;
        } catch {
          // Se n√£o encontrar, criar mock EXATO do equipamento solicitado
          console.log(`‚ö†Ô∏è [useEquipmentData] Criando mock para: "${name}"`);
          return createExactMockEquipment(name);
        }
      });
      
      const results = await Promise.all(equipmentPromises);
      const validEquipments = results.filter(Boolean) as Equipment[];
      
      console.log('‚úÖ [useEquipmentData] Equipamentos finais:', validEquipments);
      
      // VALIDA√á√ÉO CR√çTICA: Verificar se h√° substitui√ß√µes n√£o autorizadas
      const requestedNames = equipmentNames.map(name => name.toLowerCase());
      const returnedNames = validEquipments.map(eq => eq.nome.toLowerCase());
      
      for (const requestedName of requestedNames) {
        if (!returnedNames.some(returnedName => returnedName.includes(requestedName))) {
          console.error(`‚ùå [useEquipmentData] ERRO CR√çTICO: Equipamento "${requestedName}" foi substitu√≠do!`);
        }
      }
      
      setEquipments(validEquipments);
      return validEquipments;
    } catch (error) {
      console.error('‚ùå [useEquipmentData] Erro ao buscar equipamentos:', error);
      return [];
    } finally {
      setLoading(false);
    }
  };

  const createExactMockEquipment = (name: string): Equipment => {
    console.log(`üìù [useEquipmentData] Criando mock EXATO para: "${name}"`);
    
    // IMPORTANTE: Criar equipamento com o nome EXATO fornecido
    // NUNCA substituir por concorrentes ou outros equipamentos
    
    const equipmentData: Record<string, Partial<Equipment>> = {
      'HIFU': {
        nome: 'HIFU',
        tecnologia: 'Ultrassom Microfocado de Alta Intensidade',
        indicacoes: 'Lifting facial, rejuvenescimento, flacidez',
        beneficios: 'Lifting sem cirurgia, resultados naturais, est√≠mulo de col√°geno',
        diferenciais: 'Tecnologia focada em camadas profundas da pele'
      },
      'Supreme PRO': {
        nome: 'Supreme PRO',
        tecnologia: 'Eletroestimula√ß√£o com Radiofrequ√™ncia',
        indicacoes: 'Fortalecimento muscular, defini√ß√£o corporal, redu√ß√£o de gordura localizada',
        beneficios: 'Resultados r√°pidos, sem dor, n√£o invasivo, tonifica√ß√£o muscular',
        diferenciais: 'Combina radiofrequ√™ncia e eletroestimula√ß√£o em um s√≥ equipamento'
      },
      'Hipro': {
        nome: 'Hipro',
        tecnologia: 'Tecnologia HIFEM + Radiofrequ√™ncia',
        indicacoes: 'Fortalecimento muscular, queima de gordura, defini√ß√£o corporal',
        beneficios: 'Resultados vis√≠veis, n√£o invasivo, sem tempo de recupera√ß√£o',
        diferenciais: 'Combina fortalecimento muscular com redu√ß√£o de gordura'
      }
    };

    // Buscar dados espec√≠ficos ou usar gen√©ricos com o nome EXATO
    const specificData = equipmentData[name] || {};
    
    const mockEquipment: Equipment = {
      id: name.toLowerCase().replace(/\s+/g, '-'),
      nome: name, // USAR O NOME EXATO, nunca substituir
      tecnologia: specificData.tecnologia || 'Tecnologia avan√ßada para est√©tica',
      indicacoes: specificData.indicacoes || 'Tratamentos est√©ticos especializados',
      beneficios: specificData.beneficios || 'Resultados eficazes e seguros',
      diferenciais: specificData.diferenciais || 'Tecnologia de ponta em est√©tica',
      efeito: `Tratamento com ${name}`,
      linguagem: 'Profissional e acolhedora',
      data_cadastro: new Date().toISOString(),
      image_url: '',
      ativo: true,
      categoria: 'estetico' as const,
      area_aplicacao: ['Est√©tica'],
      tipo_acao: 'N√£o invasivo' as const,
      possui_consumiveis: false,
      contraindicacoes: [],
      perfil_ideal_paciente: [],
      akinator_enabled: true
    };
    
    console.log(`‚úÖ [useEquipmentData] Mock criado para "${name}":`, mockEquipment);
    return mockEquipment;
  };

  return {
    equipments,
    loading,
    getEquipmentDetails
  };
};
