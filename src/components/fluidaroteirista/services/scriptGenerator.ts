
import { generateScript } from '@/services/supabaseService';
import { toast } from 'sonner';
import { FluidaScriptResult, ScriptGenerationData } from '../types';
import { buildSystemPrompt, buildDisneyPrompt } from '../utils/promptBuilders';
import { validateScriptData, createFallbackScript } from '../utils/scriptValidation';

export const generateFluidaScript = async (
  data: ScriptGenerationData,
  equipmentDetails: any[]
): Promise<FluidaScriptResult> => {
  console.log('ü§ñ [scriptGenerator] ===== INICIANDO GERA√á√ÉO COM PROMPTS =====');
  console.log('üìã [scriptGenerator] Dados recebidos:', data);
  console.log('üîß [scriptGenerator] Equipamentos detalhados:', equipmentDetails);
  
  // VALIDA√á√ÉO CR√çTICA: garantir que apenas equipamentos selecionados sejam usados
  if (data.equipamentos && data.equipamentos.length > 0 && equipmentDetails.length === 0) {
    console.error('‚ùå [scriptGenerator] ERRO CR√çTICO: Equipamentos selecionados mas detalhes vazios');
    console.warn('‚ö†Ô∏è [scriptGenerator] Continuando sem equipamentos espec√≠ficos');
  }

  // Construir prompt do sistema com √™nfase nos equipamentos - AWAIT necess√°rio
  const systemPrompt = await buildSystemPrompt(equipmentDetails, data.modo || 'rocket', data.mentor || 'Criativo',
    {
      canal: data.canal || 'instagram',
      formato: data.formato || 'carrossel',
      objetivo: data.objetivo || 'atrair',
      estilo: data.estilo || 'criativo'
    });
  
  // CORRE√á√ÉO: Construir prompt mais enf√°tico para equipamentos
  const equipmentEmphasis = equipmentDetails.length > 0 
    ? `üö® EQUIPAMENTOS OBRIGAT√ìRIOS (MENCIONE TODOS):
${equipmentDetails.map((eq, index) => `${index + 1}. ${eq.nome}: ${eq.tecnologia}
   - Benef√≠cios: ${eq.beneficios}
   - Diferenciais: ${eq.diferenciais}`).join('\n')}

üî• REGRA CR√çTICA: O roteiro DEVE mencionar ESPECIFICAMENTE cada um destes equipamentos pelo nome.
‚ö†Ô∏è Se voc√™ n√£o mencionar os equipamentos listados, o roteiro ser√° rejeitado.`
    : 'Nenhum equipamento espec√≠fico foi selecionado. Use termos gen√©ricos.';

  const userPrompt = `
TEMA PRINCIPAL: ${data.tema}
OBJETIVO: ${data.objetivo || 'Atrair novos clientes'}
FORMATO: ${data.formato || 'carrossel'}

${equipmentEmphasis}

INSTRU√á√ïES ESPEC√çFICAS:
- Crie um roteiro de M√ÅXIMO 60 segundos
- Use a estrutura: Gancho ‚Üí Conflito ‚Üí Virada ‚Üí CTA
- OBRIGAT√ìRIO: Se equipamentos foram especificados acima, MENCIONE-OS TODOS no roteiro
- Mantenha tom ${data.mentor || 'criativo'} e emo√ß√£o envolvente
- Formato para ${data.formato || 'carrossel'}

üéØ MISS√ÉO: Integrar TODOS os equipamentos listados de forma natural no roteiro.
  `;

  console.log('üì§ [scriptGenerator] Prompts constru√≠dos:');
  console.log('üîß [scriptGenerator] System prompt length:', systemPrompt.length);
  console.log('üí¨ [scriptGenerator] User prompt:', userPrompt);

  const response = await generateScript({
    type: 'custom',
    systemPrompt,
    userPrompt,
    topic: data.tema,
    additionalInfo: JSON.stringify({ 
      equipmentDetails, 
      modo: data.modo,
      equipamentos_solicitados: data.equipamentos 
    }),
    tone: 'professional',
    marketingObjective: data.objetivo as any
  });

  console.log('üì• [scriptGenerator] Resposta recebida da API');
  console.log('üìÑ [scriptGenerator] Conte√∫do da resposta:', response.content);

  // Valida√ß√£o cr√≠tica: verificar se o conte√∫do n√£o est√° vazio
  if (!response.content || response.content.trim() === '') {
    console.error('‚ùå [scriptGenerator] ERRO CR√çTICO: Resposta vazia da API');
    throw new Error('A API retornou uma resposta vazia');
  }

  let scriptResult: FluidaScriptResult;
  try {
    // Tentar parsear como JSON primeiro
    const parsedContent = JSON.parse(response.content);
    
    // Verificar se tem a estrutura esperada
    if (parsedContent.roteiro || parsedContent.content) {
      scriptResult = {
        roteiro: parsedContent.roteiro || parsedContent.content,
        formato: parsedContent.formato || data.formato || 'carrossel',
        emocao_central: parsedContent.emocao_central || 'confian√ßa',
        intencao: parsedContent.intencao || 'atrair',
        objetivo: parsedContent.objetivo || data.objetivo || 'Atrair novos clientes',
        mentor: parsedContent.mentor || data.mentor || 'Criativo',
        equipamentos_utilizados: equipmentDetails,
        canal: data.canal || 'instagram'
      };
    } else {
      console.warn('‚ö†Ô∏è [scriptGenerator] JSON n√£o tem estrutura esperada, usando conte√∫do direto');
      scriptResult = createFallbackScript(response.content, data, equipmentDetails);
    }
    
    console.log('‚úÖ [scriptGenerator] JSON parseado com sucesso');
  } catch (parseError) {
    console.warn('‚ö†Ô∏è [scriptGenerator] Erro ao parsear JSON, usando fallback:', parseError);
    scriptResult = createFallbackScript(response.content, data, equipmentDetails);
  }

  // CORRE√á√ÉO: Valida√ß√£o mais rigorosa e corre√ß√£o autom√°tica
  if (!scriptResult.roteiro || scriptResult.roteiro.trim() === '') {
    console.error('‚ùå [scriptGenerator] ERRO CR√çTICO: Roteiro final est√° vazio');
    scriptResult = createEmergencyScript(data, equipmentDetails);
  }

  // VALIDA√á√ÉO P√ìS-GERA√á√ÉO: Verificar se equipamentos foram mencionados
  if (equipmentDetails.length > 0) {
    const equipmentsMentioned = equipmentDetails.filter(eq => 
      scriptResult.roteiro.toLowerCase().includes(eq.nome.toLowerCase())
    );
    
    console.log('üîç [scriptGenerator] Verifica√ß√£o de equipamentos no roteiro:');
    console.log('üìù [scriptGenerator] Equipamentos esperados:', equipmentDetails.map(eq => eq.nome));
    console.log('‚úÖ [scriptGenerator] Equipamentos mencionados:', equipmentsMentioned.map(eq => eq.nome));
    
    if (equipmentsMentioned.length === 0) {
      console.error('‚ùå [scriptGenerator] PROBLEMA CR√çTICO: Nenhum equipamento foi mencionado!');
      // CORRE√á√ÉO: For√ßar inclus√£o dos equipamentos
      scriptResult = forceEquipmentInclusion(scriptResult, equipmentDetails);
    } else if (equipmentsMentioned.length < equipmentDetails.length) {
      console.warn('‚ö†Ô∏è [scriptGenerator] Alguns equipamentos n√£o foram mencionados');
      // CORRE√á√ÉO: For√ßar inclus√£o dos equipamentos faltantes
      scriptResult = forceEquipmentInclusion(scriptResult, equipmentDetails, equipmentsMentioned);
    } else {
      console.log('‚úÖ [scriptGenerator] Todos os equipamentos foram mencionados!');
    }
  }

  console.log('‚úÖ [scriptGenerator] ===== ROTEIRO FINAL CRIADO =====');
  console.log('üé¨ [scriptGenerator] Resultado:', scriptResult);
  return scriptResult;
};

// NOVA FUN√á√ÉO: Criar script de emerg√™ncia
const createEmergencyScript = (data: ScriptGenerationData, equipmentDetails: any[]): FluidaScriptResult => {
  const equipmentMention = equipmentDetails.length > 0 
    ? `Com nosso ${equipmentDetails[0].nome}, que utiliza ${equipmentDetails[0].tecnologia}, voc√™ pode alcan√ßar resultados incr√≠veis.`
    : 'Nossos tratamentos avan√ßados podem te ajudar a alcan√ßar os resultados que voc√™ deseja.';
  
  const emergencyScript = `üéØ ${data.tema || 'Transforme sua vida'}

Voc√™ j√° pensou em como transformar sua autoestima? 

${equipmentMention}

‚ú® Resultados comprovados, tecnologia de ponta, cuidado personalizado.

üì≤ Agende sua consulta e descubra como podemos transformar seu cuidado pessoal.`;

  return {
    roteiro: emergencyScript,
    formato: data.formato || 'carrossel',
    emocao_central: 'confian√ßa',
    intencao: 'atrair',
    objetivo: data.objetivo || 'Atrair novos clientes',
    mentor: data.mentor || 'Criativo',
    equipamentos_utilizados: equipmentDetails,
    canal: data.canal || 'instagram'
  };
};

// NOVA FUN√á√ÉO: For√ßar inclus√£o de equipamentos
const forceEquipmentInclusion = (
  scriptResult: FluidaScriptResult, 
  equipmentDetails: any[], 
  alreadyMentioned: any[] = []
): FluidaScriptResult => {
  console.log('üîß [scriptGenerator] For√ßando inclus√£o de equipamentos...');
  
  const missingEquipments = equipmentDetails.filter(eq => 
    !alreadyMentioned.some(mentioned => mentioned.nome === eq.nome)
  );
  
  let updatedScript = scriptResult.roteiro;
  
  // Adicionar equipamentos faltantes de forma natural
  if (missingEquipments.length > 0) {
    const equipmentText = missingEquipments.length === 1 
      ? `Com nosso ${missingEquipments[0].nome}, que utiliza ${missingEquipments[0].tecnologia}, voc√™ obt√©m ${missingEquipments[0].beneficios}.`
      : `Com nossos equipamentos ${missingEquipments.map(eq => eq.nome).join(' e ')}, utilizando tecnologias avan√ßadas, voc√™ alcan√ßa resultados superiores.`;
    
    // Inserir na se√ß√£o "Virada" do roteiro (ap√≥s o conflito)
    const lines = updatedScript.split('\n');
    const middleIndex = Math.floor(lines.length / 2);
    lines.splice(middleIndex, 0, '', equipmentText);
    updatedScript = lines.join('\n');
    
    console.log('‚úÖ [scriptGenerator] Equipamentos for√ßados inclu√≠dos:', missingEquipments.map(eq => eq.nome));
  }
  
  return {
    ...scriptResult,
    roteiro: updatedScript
  };
};

export const applyDisneyTransformation = async (script: FluidaScriptResult): Promise<FluidaScriptResult> => {
  console.log('‚ú® [scriptGenerator] Aplicando Disney Magic...');
  
  const disneyPrompt = buildDisneyPrompt(script.roteiro, script.formato);
  
  const response = await generateScript({
    type: 'custom',
    systemPrompt: disneyPrompt,
    userPrompt: `Transforme este roteiro com a magia Disney de 1928: ${script.roteiro}`,
    topic: 'Disney Magic Transformation',
    additionalInfo: 'Disney Magic Applied',
    tone: 'magical',
    marketingObjective: 'Criar Conex√£o' as any
  });

  let disneyResult;
  try {
    disneyResult = JSON.parse(response.content);
  } catch {
    disneyResult = {
      roteiro: response.content,
      disney_applied: true
    };
  }

  return {
    ...script,
    roteiro: disneyResult.roteiro,
    disney_applied: true,
    emocao_central: 'encantamento',
    mentor: 'Walt Disney 1928',
    canal: script.canal
  };
};
