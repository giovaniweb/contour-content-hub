
import { generateScript } from '@/services/supabaseService';
import { toast } from 'sonner';
import { FluidaScriptResult, ScriptGenerationData } from '../types';
import { buildSystemPrompt, buildDisneyPrompt } from '../utils/promptBuilders';
import { validateScriptData, createFallbackScript } from '../utils/scriptValidation';

export const generateFluidaScript = async (
  data: ScriptGenerationData,
  equipmentDetails: any[]
): Promise<FluidaScriptResult> => {
  console.log('ü§ñ [scriptGenerator] Iniciando gera√ß√£o de roteiro...');
  console.log('üìã [scriptGenerator] Dados recebidos:', data);
  console.log('üîß [scriptGenerator] Equipamentos:', equipmentDetails);
  
  // Valida√ß√£o cr√≠tica: garantir que apenas equipamentos selecionados sejam usados
  if (data.equipamentos && data.equipamentos.length > 0 && equipmentDetails.length === 0) {
    console.error('‚ùå [scriptGenerator] ERRO CR√çTICO: Equipamentos selecionados mas detalhes vazios');
    throw new Error('Equipamentos selecionados n√£o foram carregados corretamente');
  }

  const systemPrompt = buildSystemPrompt(equipmentDetails, data.modo || 'rocket', data.mentor || 'Criativo');
  
  const userPrompt = `
    Tema: ${data.tema}
    Objetivo: ${data.objetivo || 'Atrair novos clientes'}
    Equipamentos EXCLUSIVOS a usar: ${data.equipamentos?.join(', ') || 'Nenhum equipamento espec√≠fico'}
    
    IMPORTANTE: Use APENAS os equipamentos listados acima. NUNCA mencione outros equipamentos.
    
    Crie um roteiro CONCISO de M√ÅXIMO 60 segundos integrando os equipamentos e suas caracter√≠sticas espec√≠ficas.
  `;

  console.log('üì§ [scriptGenerator] Enviando para API OpenAI...');

  const response = await generateScript({
    type: 'custom',
    systemPrompt,
    userPrompt,
    topic: data.tema,
    additionalInfo: JSON.stringify({ equipmentDetails, modo: data.modo }),
    tone: 'professional',
    marketingObjective: data.objetivo as any
  });

  console.log('üì• [scriptGenerator] Resposta recebida da API');
  console.log('üìÑ [scriptGenerator] Conte√∫do da resposta:', response.content);

  // Valida√ß√£o cr√≠tica: verificar se o conte√∫do n√£o est√° vazio
  if (!response.content || response.content.trim() === '') {
    console.error('‚ùå [scriptGenerator] ERRO CR√çTICO: Resposta vazia da API');
    throw new Error('A API retornou uma resposta vazia');
  }

  let scriptResult: FluidaScriptResult;
  try {
    // Tentar parsear como JSON primeiro
    const parsedContent = JSON.parse(response.content);
    
    // Verificar se tem a estrutura esperada
    if (parsedContent.roteiro || parsedContent.content) {
      scriptResult = {
        roteiro: parsedContent.roteiro || parsedContent.content,
        formato: parsedContent.formato || data.formato || 'carrossel',
        emocao_central: parsedContent.emocao_central || 'confian√ßa',
        intencao: parsedContent.intencao || 'atrair',
        objetivo: parsedContent.objetivo || data.objetivo || 'Atrair novos clientes',
        mentor: parsedContent.mentor || data.mentor || 'Criativo',
        equipamentos_utilizados: equipmentDetails
      };
    } else {
      console.warn('‚ö†Ô∏è [scriptGenerator] JSON n√£o tem estrutura esperada, usando conte√∫do direto');
      scriptResult = createFallbackScript(response.content, data, equipmentDetails);
    }
    
    console.log('‚úÖ [scriptGenerator] JSON parseado com sucesso');
  } catch (parseError) {
    console.warn('‚ö†Ô∏è [scriptGenerator] Erro ao parsear JSON, usando fallback:', parseError);
    // Se n√£o for JSON v√°lido, usar o conte√∫do direto
    scriptResult = createFallbackScript(response.content, data, equipmentDetails);
  }

  // Valida√ß√£o final: garantir que o roteiro n√£o est√° vazio
  if (!scriptResult.roteiro || scriptResult.roteiro.trim() === '') {
    console.error('‚ùå [scriptGenerator] ERRO CR√çTICO: Roteiro final est√° vazio');
    scriptResult.roteiro = `Roteiro sobre ${data.tema}

Voc√™ j√° pensou em como melhorar ${data.tema}? 

${data.equipamentos && data.equipamentos.length > 0 
  ? `Com nosso ${data.equipamentos[0]}, voc√™ pode alcan√ßar resultados incr√≠veis de forma segura e eficaz.` 
  : 'Nossos tratamentos avan√ßados podem te ajudar a alcan√ßar os resultados que voc√™ deseja.'}

Agende sua consulta e descubra como podemos transformar seu cuidado pessoal.`;
  }

  console.log('‚úÖ [scriptGenerator] Roteiro final criado:', scriptResult);
  return scriptResult;
};

export const applyDisneyTransformation = async (script: FluidaScriptResult): Promise<FluidaScriptResult> => {
  console.log('‚ú® [scriptGenerator] Aplicando Disney Magic...');
  
  const disneyPrompt = buildDisneyPrompt(script.roteiro);
  
  const response = await generateScript({
    type: 'custom',
    systemPrompt: disneyPrompt,
    userPrompt: `Transforme este roteiro com a magia Disney de 1928: ${script.roteiro}`,
    topic: 'Disney Magic Transformation',
    additionalInfo: 'Disney Magic Applied',
    tone: 'magical',
    marketingObjective: 'Criar Conex√£o' as any
  });

  let disneyResult;
  try {
    disneyResult = JSON.parse(response.content);
  } catch {
    disneyResult = {
      roteiro: response.content,
      disney_applied: true
    };
  }

  return {
    ...script,
    roteiro: disneyResult.roteiro,
    disney_applied: true,
    emocao_central: 'encantamento',
    mentor: 'Walt Disney 1928'
  };
};
