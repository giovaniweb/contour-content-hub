
import { toast } from 'sonner';
import { ScriptGenerationData, FluidaScriptResult } from '../types';

export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  suggestions: string[];
  missingFields: string[];
  quality: 'low' | 'medium' | 'high';
}

export interface QualityCheck {
  hasEquipmentMention: boolean;
  hasMentorTone: boolean;
  hasSpecificCTA: boolean;
  hasEmotionalHook: boolean;
  isEngaging: boolean;
  isPersonalized: boolean;
}

/**
 * Valida√ß√£o PR√â-GERA√á√ÉO - Bloqueia se n√£o atender crit√©rios m√≠nimos
 */
export const validatePreGeneration = (data: ScriptGenerationData): ValidationResult => {
  console.log('üîç [antiGenericValidation] Iniciando valida√ß√£o pr√©-gera√ß√£o:', data);
  
  const errors: string[] = [];
  const suggestions: string[] = [];
  const missingFields: string[] = [];

  // 1. VALIDA√á√ÉO DE TEMA - Deve ser espec√≠fico
  if (!data.tema || data.tema.trim().length < 10) {
    errors.push('Tema muito vago ou curto');
    missingFields.push('tema');
    suggestions.push('Descreva um tema espec√≠fico com pelo menos 10 caracteres');
  }

  // Detectar temas gen√©ricos proibidos
  const genericTerms = ['melasma', 'tratamento', 'procedimento', 'beleza', 'est√©tica'];
  const isGenericTheme = genericTerms.some(term => 
    data.tema?.toLowerCase().includes(term) && data.tema.length < 20
  );

  if (isGenericTheme) {
    errors.push('Tema muito gen√©rico - precisa ser mais espec√≠fico');
    suggestions.push('Exemplo: "Como tratar melasma com Laser Q-Switch para mulheres de 30-45 anos"');
  }

  // 2. VALIDA√á√ÉO DE EQUIPAMENTO - Obrigat√≥rio para qualidade
  if (!data.equipamentos || data.equipamentos.length === 0) {
    missingFields.push('equipamentos');
    suggestions.push('Selecione pelo menos um equipamento espec√≠fico da sua cl√≠nica');
  }

  // 3. VALIDA√á√ÉO DE OBJETIVO - Deve ser claro
  if (!data.objetivo || data.objetivo === 'atrair') {
    missingFields.push('objetivo');
    suggestions.push('Defina um objetivo espec√≠fico: educar, vender, conectar, gerar leads');
  }

  // 4. VALIDA√á√ÉO DE MENTOR - Deve estar inferido
  if (!data.mentor || data.mentor === 'Criativo') {
    missingFields.push('mentor');
    suggestions.push('O sistema deve inferir um mentor espec√≠fico baseado nas suas escolhas');
  }

  // 5. VALIDA√á√ÉO DE CONTEXTO - Verificar se h√° informa√ß√µes suficientes
  const hasMinimumContext = (
    data.tema && data.tema.length > 15 &&
    data.equipamentos && data.equipamentos.length > 0 &&
    data.objetivo && data.objetivo !== 'atrair' &&
    data.mentor && data.mentor !== 'Criativo'
  );

  if (!hasMinimumContext) {
    errors.push('Contexto insuficiente para gerar roteiro personalizado');
    suggestions.push('Complete todas as informa√ß√µes obrigat√≥rias antes de gerar');
  }

  // Determinar qualidade baseada nos crit√©rios
  let quality: 'low' | 'medium' | 'high' = 'low';
  if (errors.length === 0 && missingFields.length === 0) {
    quality = 'high';
  } else if (errors.length <= 1 && missingFields.length <= 2) {
    quality = 'medium';
  }

  const result: ValidationResult = {
    isValid: errors.length === 0 && missingFields.length === 0,
    errors,
    suggestions,
    missingFields,
    quality
  };

  console.log('üìä [antiGenericValidation] Resultado da valida√ß√£o pr√©-gera√ß√£o:', result);
  return result;
};

/**
 * Valida√ß√£o P√ìS-GERA√á√ÉO - Verifica qualidade do roteiro gerado
 */
export const validatePostGeneration = (
  script: FluidaScriptResult, 
  originalData: ScriptGenerationData
): QualityCheck => {
  console.log('üéØ [antiGenericValidation] Iniciando valida√ß√£o p√≥s-gera√ß√£o');
  console.log('üìù [antiGenericValidation] Script:', script.roteiro);
  console.log('üîß [antiGenericValidation] Equipamentos esperados:', originalData.equipamentos);

  const roteiro = script.roteiro.toLowerCase();
  
  // 1. Verificar men√ß√£o de equipamentos espec√≠ficos
  const hasEquipmentMention = originalData.equipamentos?.some(equipment => {
    const mentioned = roteiro.includes(equipment.toLowerCase());
    console.log(`üîç [antiGenericValidation] Equipamento "${equipment}" mencionado:`, mentioned);
    return mentioned;
  }) || false;

  // 2. Verificar tom do mentor
  const mentorIndicators = getMentorIndicators(originalData.mentor || 'Criativo');
  const hasMentorTone = mentorIndicators.some(indicator => 
    roteiro.includes(indicator.toLowerCase())
  );

  // 3. Verificar CTA espec√≠fico
  const specificCTATerms = ['agende', 'consulta', 'whatsapp', 'link', 'bio', 'dm', 'direct'];
  const hasSpecificCTA = specificCTATerms.some(term => roteiro.includes(term));

  // 4. Verificar gancho emocional
  const emotionalHooks = ['voc√™', 'sua', 'imagine', 'sente', 'sonha', 'quer', 'precisa'];
  const hasEmotionalHook = emotionalHooks.some(hook => roteiro.includes(hook));

  // 5. Verificar engajamento
  const engagingTerms = ['segredo', 'descobri', 'revela√ß√£o', 'transforma√ß√£o', 'resultado'];
  const isEngaging = engagingTerms.some(term => roteiro.includes(term));

  // 6. Verificar personaliza√ß√£o (n√£o gen√©rico)
  const genericTerms = ['tratamento geral', 'procedimento comum', 'resultado padr√£o'];
  const isPersonalized = !genericTerms.some(term => roteiro.includes(term));

  const qualityCheck: QualityCheck = {
    hasEquipmentMention,
    hasMentorTone,
    hasSpecificCTA,
    hasEmotionalHook,
    isEngaging,
    isPersonalized
  };

  console.log('‚úÖ [antiGenericValidation] Quality check resultado:', qualityCheck);
  return qualityCheck;
};

/**
 * Obter indicadores de tom baseados no mentor
 */
const getMentorIndicators = (mentor: string): string[] => {
  const indicators: Record<string, string[]> = {
    'Criativo': ['inovador', '√∫nico', 'especial', 'diferente', 'criativo'],
    'Cient√≠fico': ['estudos', 'comprovado', 'evid√™ncia', 'pesquisa', 'cient√≠fico'],
    'Emocional': ['sente', 'emo√ß√£o', 'cora√ß√£o', 'sonho', 'transforma√ß√£o'],
    'Direto': ['agora', 'hoje', 'r√°pido', 'resultado', 'eficaz'],
    'Disney': ['sonho', 'magia', 'encanto', 'jornada', 'transforma√ß√£o'],
    'Storytelling': ['hist√≥ria', 'era uma vez', 'aconteceu', 'descobriu', 'virou']
  };

  return indicators[mentor] || indicators['Criativo'];
};

/**
 * Gerar perguntas inteligentes baseadas no que est√° faltando
 */
export const generateSmartQuestions = (validation: ValidationResult): string[] => {
  const questions: string[] = [];

  if (validation.missingFields.includes('tema')) {
    questions.push('Sobre que problema espec√≠fico do seu cliente voc√™ quer falar?');
    questions.push('Que resultado ou transforma√ß√£o voc√™ quer destacar?');
  }

  if (validation.missingFields.includes('equipamentos')) {
    questions.push('Qual equipamento da sua cl√≠nica voc√™ quer destacar?');
    questions.push('Que tecnologia voc√™ tem dispon√≠vel para este tratamento?');
  }

  if (validation.missingFields.includes('objetivo')) {
    questions.push('Voc√™ quer educar, vender ou gerar conex√£o com este post?');
    questions.push('Qual a√ß√£o voc√™ quer que o cliente tome depois de ver seu conte√∫do?');
  }

  if (validation.missingFields.includes('mentor')) {
    questions.push('Que estilo de comunica√ß√£o representa melhor sua cl√≠nica?');
    questions.push('Voc√™ prefere ser mais t√©cnico, emocional ou direto?');
  }

  return questions;
};

/**
 * Verificar se o roteiro atende aos padr√µes m√≠nimos de qualidade
 */
export const meetsQualityStandards = (qualityCheck: QualityCheck): boolean => {
  // Crit√©rios m√≠nimos: pelo menos 4 dos 6 checks devem passar
  const passedChecks = Object.values(qualityCheck).filter(Boolean).length;
  const minimumRequired = 4;
  
  console.log(`üéØ [antiGenericValidation] Checks passaram: ${passedChecks}/${Object.values(qualityCheck).length}`);
  return passedChecks >= minimumRequired;
};

/**
 * Gerar sugest√µes de melhoria baseadas no quality check
 */
export const generateImprovementSuggestions = (
  qualityCheck: QualityCheck, 
  originalData: ScriptGenerationData
): string[] => {
  const suggestions: string[] = [];

  if (!qualityCheck.hasEquipmentMention) {
    suggestions.push(`Mencione especificamente o equipamento: ${originalData.equipamentos?.join(', ')}`);
  }

  if (!qualityCheck.hasMentorTone) {
    suggestions.push(`Ajuste o tom para refletir o mentor ${originalData.mentor}`);
  }

  if (!qualityCheck.hasSpecificCTA) {
    suggestions.push('Adicione um CTA mais espec√≠fico e direto');
  }

  if (!qualityCheck.hasEmotionalHook) {
    suggestions.push('Crie um gancho mais emocional e pessoal');
  }

  if (!qualityCheck.isEngaging) {
    suggestions.push('Torne o conte√∫do mais envolvente e impactante');
  }

  if (!qualityCheck.isPersonalized) {
    suggestions.push('Remova termos gen√©ricos e personalize mais o conte√∫do');
  }

  return suggestions;
};
