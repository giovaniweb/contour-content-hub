
import { MarketingConsultantState } from './types';
import { MarketingMentorInference } from './mentorInference';
import { generateAIDiagnostic } from '@/utils/aiDiagnosticUtils';

export const generateMarketingDiagnostic = async (
  state: MarketingConsultantState, 
  useAI: boolean = true
): Promise<string> => {
  // Se usar IA estiver habilitado, tentar gerar via OpenAI primeiro
  if (useAI) {
    try {
      const aiDiagnostic = await generateAIDiagnostic(state);
      if (aiDiagnostic) {
        return aiDiagnostic;
      }
    } catch (error) {
      console.error('Erro na gera√ß√£o via IA, usando fallback:', error);
    }
  }

  // Fallback para l√≥gica atual
  return generateStaticDiagnostic(state);
};

// Fun√ß√£o para chamar a IA diretamente (sem hook)
const callAIDiagnostic = async (state: MarketingConsultantState): Promise<string | null> => {
  try {
    const { supabase } = await import('@/integrations/supabase/client');
    
    const { data, error } = await supabase.functions.invoke('generate-marketing-diagnostic', {
      body: state
    });

    if (error || !data.success) {
      return null;
    }

    return data.diagnostic;
  } catch (error) {
    console.error('Erro na chamada da IA:', error);
    return null;
  }
};

// Fun√ß√£o com a l√≥gica est√°tica atual (como fallback)
const generateStaticDiagnostic = (state: MarketingConsultantState): string => {
  const isClinicaMedica = state.clinicType === 'clinica_medica';
  const clinicTypeAnalysis = getClinicTypeAnalysis(state);
  const revenueAnalysis = getRevenueAnalysis(state.currentRevenue || '', state.revenueGoal || '');
  const marketingAnalysis = getMarketingAnalysis(state);
  const strategicActions = getStrategicActions(state);
  const nextSteps = getNextSteps(state);
  
  // Inferir mentor baseado no perfil
  const { mentor, enigma } = MarketingMentorInference.inferMentor(state);
  
  return `# üéØ DIAGN√ìSTICO ESTRAT√âGICO FLUIDA

## üìä PERFIL DA CL√çNICA
${clinicTypeAnalysis}

## üí∞ AN√ÅLISE FINANCEIRA E OBJETIVOS
${revenueAnalysis}

## üì± MARKETING E COMUNICA√á√ÉO ATUAL
${marketingAnalysis}

## üöÄ PLANO DE A√á√ÉO - 3 SEMANAS

### SEMANA 1: ${getWeek1Action(state)}
### SEMANA 2: ${getWeek2Action(state)}
### SEMANA 3: ${getWeek3Action(state)}

## üìà ESTRAT√âGIAS PERSONALIZADAS
${strategicActions}

## üéØ PR√ìXIMOS PASSOS PRIORIT√ÅRIOS
${nextSteps}

## üß© REFLEX√ÉO ESTRAT√âGICA
*Se ${mentor.name} olhasse esses dados ia fazer muitas sugest√µes boas, porque voc√™ tem muito potencial. ${enigma}*

---
*Diagn√≥stico gerado pelo Consultor Fluida AI*`;
};

const getClinicTypeAnalysis = (state: MarketingConsultantState): string => {
  if (state.clinicType === 'clinica_medica') {
    const specialty = getSpecialtyAnalysis(state.medicalSpecialty || '');
    const procedures = getProcedureAnalysis(state.medicalProcedures || '');
    const positioning = getPositioningAnalysis(state.clinicPosition || '');
    
    return `**CL√çNICA M√âDICA ESPECIALIZADA**
${specialty}
${procedures}
${positioning}

**Diferenciais identificados:**
- Credibilidade m√©dica como vantagem competitiva
- P√∫blico mais exigente e com maior poder aquisitivo
- Comunica√ß√£o deve focar em seguran√ßa e resultados cient√≠ficos`;
  } else {
    const focus = getAestheticFocusAnalysis(state.aestheticFocus || '');
    const equipment = getEquipmentAnalysis(state.aestheticEquipments || '');
    const positioning = getPositioningAnalysis(state.clinicPosition || '');
    
    return `**CL√çNICA EST√âTICA ESPECIALIZADA**
${focus}
${equipment}
${positioning}

**Diferenciais identificados:**
- Foco em bem-estar e autoestima
- Comunica√ß√£o humanizada e emocional
- P√∫blico sens√≠vel a transforma√ß√µes visuais`;
  }
};

const getSpecialtyAnalysis = (specialty: string): string => {
  const analyses = {
    'dermatologia': 'Especialidade: Dermatologia - Autoridade m√©dica natural em tratamentos de pele.',
    'nutrologia': 'Especialidade: Nutrologia - Foco em sa√∫de integral e resultados duradouros.',
    'ginecoestetica': 'Especialidade: Ginecoest√©tica - Nicho espec√≠fico com alta demanda.',
    'cirurgia_plastica': 'Especialidade: Cirurgia Pl√°stica - Procedimentos de alto valor agregado.',
    'medicina_estetica': 'Especialidade: Medicina Est√©tica - Combina√ß√£o perfeita de t√©cnica e est√©tica.',
    'outras': 'Especialidade m√©dica diferenciada - Oportunidade de posicionamento √∫nico.'
  };
  return analyses[specialty as keyof typeof analyses] || 'Especialidade m√©dica identificada.';
};

const getProcedureAnalysis = (procedures: string): string => {
  const analyses = {
    'invasivos': 'Procedimentos invasivos - Ticket alto, foco em resultados definitivos.',
    'injetaveis': 'Injet√°veis - Recorr√™ncia natural, fideliza√ß√£o por manuten√ß√£o.',
    'tecnologicos': 'Tecnol√≥gicos - Modernidade como diferencial, resultados progressivos.',
    'combinados': 'Portf√≥lio combinado - Versatilidade para diferentes perfis de pacientes.'
  };
  return analyses[procedures as keyof typeof analyses] || 'Procedimentos m√©dicos variados.';
};

const getAestheticFocusAnalysis = (focus: string): string => {
  const analyses = {
    'corporal': 'Foco corporal - Mercado sazonal, picos no ver√£o e in√≠cio do ano.',
    'facial': 'Foco facial - Demanda constante, menor sazonalidade.',
    'ambos': 'Portf√≥lio completo - Vantagem competitiva pela diversidade.',
    'depilacao': 'Depila√ß√£o a laser - Recorr√™ncia natural, base s√≥lida de faturamento.'
  };
  return analyses[focus as keyof typeof analyses] || 'Foco est√©tico definido.';
};

const getEquipmentAnalysis = (equipment: string): string => {
  const analyses = {
    'hifu_radio': 'HIFU e Radiofrequ√™ncia - Tecnologia avan√ßada para resultados corporais.',
    'heccus_crio': 'Heccus e Criolip√≥lise - Foco em gordura localizada, alta demanda.',
    'laser_depilacao': 'Laser depila√ß√£o - Base recorrente, faturamento previs√≠vel.',
    'sem_equipamentos': 'Cl√≠nica manual - Foco na t√©cnica e relacionamento.',
    'varios': 'M√∫ltiplos equipamentos - Portf√≥lio diversificado.'
  };
  return analyses[equipment as keyof typeof equipment] || 'Equipamentos identificados.';
};

const getPositioningAnalysis = (position: string): string => {
  const analyses = {
    'premium': 'Posicionamento Premium - Foco em exclusividade e excel√™ncia.',
    'humanizada': 'Posicionamento Humanizado - Acolhimento e relacionamento pr√≥ximo.',
    'acessivel': 'Posicionamento Acess√≠vel - Democratiza√ß√£o dos tratamentos.',
    'tecnica': 'Posicionamento T√©cnico - Expertise e resultados cient√≠ficos.',
    'moderna': 'Posicionamento Moderno - Inova√ß√£o e tend√™ncias.'
  };
  return analyses[position as keyof typeof position] || 'Posicionamento definido.';
};

const getRevenueAnalysis = (current: string, goal: string): string => {
  const currentAnalysis = {
    'ate_15k': 'Faturamento inicial - Foco em estrutura√ß√£o e crescimento.',
    '15k_30k': 'Faturamento em crescimento - Momento de profissionalizar.',
    '30k_60k': 'Faturamento consolidado - Otimiza√ß√£o e expans√£o.',
    'acima_60k': 'Alto faturamento - Efici√™ncia e lideran√ßa de mercado.'
  };
  
  const goalAnalysis = {
    'crescer_30': 'Meta: Crescimento de 30% - Objetivo realista e alcan√ß√°vel.',
    'crescer_50': 'Meta: Crescimento de 50% - Ambi√ß√£o moderada, estrat√©gia focada.',
    'dobrar': 'Meta: Dobrar faturamento - Objetivo ambicioso, mudan√ßa estrutural.',
    'manter_estavel': 'Meta: Manter estabilidade - Foco em efici√™ncia operacional.'
  };
  
  return `${currentAnalysis[current as keyof typeof currentAnalysis] || 'An√°lise de faturamento'}\n${goalAnalysis[goal as keyof typeof goalAnalysis] || 'Meta definida'}`;
};

const getMarketingAnalysis = (state: MarketingConsultantState): string => {
  let analysis = 'Status atual do marketing:\n';
  
  const personalBrand = {
    'sim_sempre': '‚úÖ Marca pessoal ativa - Vantagem competitiva estabelecida.',
    'as_vezes': '‚ö†Ô∏è Presen√ßa irregular - Oportunidade de consist√™ncia.',
    'raramente': '‚ùå Pouca exposi√ß√£o - Potencial inexplorado de autoridade.',
    'nunca': '‚ùå Aus√™ncia total - Necessidade urgente de posicionamento.'
  };
  
  const contentFreq = {
    'diario': '‚úÖ Conte√∫do di√°rio - Excelente engajamento.',
    'varios_por_semana': '‚úÖ Boa frequ√™ncia - Manter consist√™ncia.',
    'semanal': '‚ö†Ô∏è Frequ√™ncia baixa - Aumentar produ√ß√£o.',
    'irregular': '‚ùå Inconsistente - Criar cronograma estruturado.'
  };
  
  const paidTraffic = {
    'sim_regular': '‚úÖ Tr√°fego pago ativo - Otimizar ROI.',
    'esporadico': '‚ö†Ô∏è Uso espor√°dico - Estruturar campanhas.',
    'ja_testei': '‚ùå Experi√™ncia negativa - Revisar estrat√©gia.',
    'nunca_usei': '‚ùå Sem tr√°fego pago - Oportunidade de crescimento.'
  };
  
  analysis += personalBrand[state.personalBrand as keyof typeof personalBrand] || 'Presen√ßa pessoal n√£o definida.';
  analysis += '\n' + (contentFreq[state.contentFrequency as keyof typeof contentFreq] || 'Frequ√™ncia n√£o definida.');
  analysis += '\n' + (paidTraffic[state.paidTraffic as keyof typeof paidTraffic] || 'Tr√°fego pago n√£o definido.');
  
  return analysis;
};

const getStrategicActions = (state: MarketingConsultantState): string => {
  const isClinicaMedica = state.clinicType === 'clinica_medica';
  
  if (isClinicaMedica) {
    return `**Estrat√©gias para Cl√≠nica M√©dica:**
‚Ä¢ Conte√∫do educativo com base cient√≠fica
‚Ä¢ Cases de sucesso com resultados mensur√°veis
‚Ä¢ Participa√ß√£o em eventos m√©dicos e lives
‚Ä¢ Parcerias com outros profissionais da sa√∫de
‚Ä¢ Comunica√ß√£o t√©cnica mas acess√≠vel`;
  } else {
    return `**Estrat√©gias para Cl√≠nica Est√©tica:**
‚Ä¢ Transforma√ß√µes visuais (antes/depois)
‚Ä¢ Conte√∫do emocional e inspirador
‚Ä¢ Depoimentos de clientes satisfeitas
‚Ä¢ Trends e novidades do mercado est√©tico
‚Ä¢ Comunica√ß√£o humanizada e pr√≥xima`;
  }
};

const getWeek1Action = (state: MarketingConsultantState): string => {
  if (state.personalBrand === 'nunca' || state.personalBrand === 'raramente') {
    return 'Estruturar presen√ßa pessoal e definir tom de comunica√ß√£o';
  }
  if (state.contentFrequency === 'irregular') {
    return 'Criar cronograma de conte√∫do e banco de ideias';
  }
  return 'Otimizar conte√∫do atual e definir objetivos claros';
};

const getWeek2Action = (state: MarketingConsultantState): string => {
  if (state.paidTraffic === 'nunca_usei') {
    return 'Estruturar primeira campanha de tr√°fego pago';
  }
  if (state.clinicType === 'clinica_medica') {
    return 'Criar conte√∫do de autoridade m√©dica e cases';
  }
  return 'Implementar campanhas de capta√ß√£o e engajamento';
};

const getWeek3Action = (state: MarketingConsultantState): string => {
  return 'An√°lise de resultados, ajustes e planejamento do pr√≥ximo m√™s';
};

const getNextSteps = (state: MarketingConsultantState): string => {
  const steps = [];
  
  if (state.personalBrand === 'nunca' || state.personalBrand === 'raramente') {
    steps.push('1. Definir posicionamento pessoal e come√ßar a aparecer no conte√∫do');
  }
  
  if (state.contentFrequency === 'irregular' || state.contentFrequency === 'semanal') {
    steps.push('2. Criar cronograma de conte√∫do com no m√≠nimo 3 posts por semana');
  }
  
  if (state.paidTraffic === 'nunca_usei' || state.paidTraffic === 'ja_testei') {
    steps.push('3. Estruturar estrat√©gia de tr√°fego pago com or√ßamento definido');
  }
  
  steps.push('4. Implementar sistema de acompanhamento de m√©tricas e ROI');
  
  return steps.join('\n');
};

const getEnigmaMentor = (state: MarketingConsultantState): string => {
  const enigmas = [
    "Quem entende seu p√∫blico, n√£o precisa gritar para ser ouvido.",
    "A consist√™ncia vence a perfei√ß√£o em marketing digital.",
    "Autoridade se constr√≥i compartilhando conhecimento, n√£o escondendo.",
    "Quem n√£o aparece, n√£o vende. Quem aparece mal, vende menos ainda.",
    "O melhor marketing √© aquele que n√£o parece marketing.",
    "Resultados falam mais alto que promessas vazias.",
    "Humanizar √© mais importante que vender."
  ];
  
  // Selecionar enigma baseado no perfil
  if (state.clinicType === 'clinica_medica') {
    return enigmas[2]; // Sobre autoridade
  }
  if (state.personalBrand === 'nunca') {
    return enigmas[3]; // Sobre aparecer
  }
  if (state.contentFrequency === 'irregular') {
    return enigmas[1]; // Sobre consist√™ncia
  }
  
  return enigmas[Math.floor(Math.random() * enigmas.length)];
};
