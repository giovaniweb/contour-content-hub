
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.7.1";

const OPENAI_API_KEY = Deno.env.get('OPENAI_API_KEY');
const SUPABASE_URL = Deno.env.get('SUPABASE_URL') || '';
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('ü§ñ [AskDocument] Iniciando processamento de pergunta...');
    const { documentId, question } = await req.json();
    
    if (!documentId || !question) {
      console.error('‚ùå [AskDocument] Par√¢metros obrigat√≥rios n√£o fornecidos');
      return new Response(
        JSON.stringify({ error: 'Document ID e pergunta s√£o obrigat√≥rios' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log(`üìÑ [AskDocument] Pergunta sobre documento: ${documentId}`);
    console.log(`‚ùì [AskDocument] Pergunta: ${question}`);

    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

    // 1. Buscar documento na unified_documents
    console.log('üîç [AskDocument] Buscando documento...');
    const { data: document, error: docError } = await supabase
      .from('unified_documents')
      .select('*')
      .eq('id', documentId)
      .single();

    if (docError || !document) {
      console.error('‚ùå [AskDocument] Documento n√£o encontrado:', docError);
      return new Response(
        JSON.stringify({ error: 'Documento n√£o encontrado' }),
        { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log('‚úÖ [AskDocument] Documento encontrado:', document.titulo_extraido);

    // 2. Verificar se o documento tem conte√∫do para an√°lise
    const documentContent = document.texto_completo || document.raw_text;
    
    if (!documentContent) {
      console.warn('‚ö†Ô∏è [AskDocument] Documento sem conte√∫do processado');
      return new Response(
        JSON.stringify({ 
          error: 'Este documento ainda n√£o foi processado ou n√£o possui conte√∫do extra√≠do.' 
        }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // 3. Processar pergunta com IA
    let answer;

    if (OPENAI_API_KEY) {
      console.log('ü§ñ [AskDocument] Processando com OpenAI...');
      try {
        answer = await processWithOpenAI(question, documentContent, document);
      } catch (openaiError) {
        console.warn('‚ö†Ô∏è [AskDocument] Erro OpenAI, usando resposta padr√£o:', openaiError);
        answer = generateFallbackAnswer(question, document);
      }
    } else {
      console.log('üìù [AskDocument] Sem OpenAI, usando resposta padr√£o...');
      answer = generateFallbackAnswer(question, document);
    }

    console.log('‚úÖ [AskDocument] Resposta gerada com sucesso');

    return new Response(
      JSON.stringify({ 
        success: true,
        answer,
        documentTitle: document.titulo_extraido || 'Documento',
        documentType: document.tipo_documento
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('üí• [AskDocument] Erro cr√≠tico:', error);
    
    return new Response(
      JSON.stringify({ 
        error: 'Erro interno do servidor',
        details: error.message 
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});

async function processWithOpenAI(question: string, documentContent: string, document: any): Promise<string> {
  const systemPrompt = `Voc√™ √© um assistente especializado em an√°lise de documentos cient√≠ficos e t√©cnicos. 
Responda √† pergunta do usu√°rio baseando-se exclusivamente no conte√∫do do documento fornecido.

INFORMA√á√ïES DO DOCUMENTO:
- T√≠tulo: ${document.titulo_extraido || 'N√£o especificado'}
- Tipo: ${document.tipo_documento || 'N√£o especificado'}
- Autores: ${document.autores?.join(', ') || 'N√£o especificados'}
- Palavras-chave: ${document.palavras_chave?.join(', ') || 'N√£o especificadas'}

DIRETRIZES:
1. Responda apenas com base no conte√∫do fornecido
2. Se a pergunta n√£o puder ser respondida com as informa√ß√µes dispon√≠veis, diga isso claramente
3. Seja preciso e objetivo
4. Use portugu√™s brasileiro
5. Cite trechos espec√≠ficos quando relevante`;

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: `CONTE√öDO DO DOCUMENTO:\n${documentContent.substring(0, 3000)}\n\nPERGUNTA: ${question}`
          }
        ],
        max_tokens: 500,
        temperature: 0.3
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå [AskDocument] Erro OpenAI:', errorData);
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const result = await response.json();
    const answer = result.choices[0]?.message?.content;
    
    if (!answer) {
      throw new Error('Resposta vazia da OpenAI');
    }

    return answer;
  } catch (error) {
    console.error('‚ùå [AskDocument] Erro ao processar com OpenAI:', error);
    throw error;
  }
}

function generateFallbackAnswer(question: string, document: any): string {
  const questionLower = question.toLowerCase();
  
  // Respostas baseadas em palavras-chave da pergunta
  if (questionLower.includes('t√≠tulo') || questionLower.includes('nome')) {
    return `O t√≠tulo deste documento √©: "${document.titulo_extraido || 'T√≠tulo n√£o especificado'}"`;
  }
  
  if (questionLower.includes('autor') || questionLower.includes('quem escreveu')) {
    const autores = document.autores || [];
    if (autores.length > 0) {
      return `O(s) autor(es) deste documento s√£o: ${autores.join(', ')}`;
    }
    return 'Informa√ß√µes sobre autores n√£o est√£o dispon√≠veis neste documento.';
  }
  
  if (questionLower.includes('resumo') || questionLower.includes('sobre o que')) {
    const resumo = document.texto_completo;
    if (resumo && resumo.length > 50) {
      return `Com base no conte√∫do dispon√≠vel: ${resumo.substring(0, 300)}${resumo.length > 300 ? '...' : ''}`;
    }
    return 'Resumo n√£o dispon√≠vel para este documento.';
  }
  
  if (questionLower.includes('palavra') && questionLower.includes('chave')) {
    const palavrasChave = document.palavras_chave || [];
    if (palavrasChave.length > 0) {
      return `As palavras-chave deste documento s√£o: ${palavrasChave.join(', ')}`;
    }
    return 'Palavras-chave n√£o foram identificadas neste documento.';
  }
  
  if (questionLower.includes('tipo') || questionLower.includes('categoria')) {
    const tipo = document.tipo_documento || 'n√£o especificado';
    return `Este documento √© classificado como: ${tipo.replace('_', ' ')}`;
  }
  
  // Resposta padr√£o
  return `Desculpe, n√£o consigo responder especificamente √† sua pergunta com as informa√ß√µes dispon√≠veis deste documento. 

**Informa√ß√µes dispon√≠veis:**
- **T√≠tulo:** ${document.titulo_extraido || 'N√£o especificado'}
- **Tipo:** ${document.tipo_documento?.replace('_', ' ') || 'N√£o especificado'}
- **Autores:** ${document.autores?.join(', ') || 'N√£o especificados'}
- **Palavras-chave:** ${document.palavras_chave?.join(', ') || 'N√£o especificadas'}

Tente fazer uma pergunta mais espec√≠fica sobre o t√≠tulo, autores, ou conte√∫do geral do documento.`;
}
