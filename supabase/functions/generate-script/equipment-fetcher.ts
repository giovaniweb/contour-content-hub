
export interface EquipmentData {
  id: string;
  nome: string;
  tecnologia: string;
  indicacoes: string;
  beneficios: string;
  diferenciais: string;
  categoria: string;
}

export class EquipmentFetcher {
  static async fetchEquipmentDetails(supabase: any, equipmentNames: string[]): Promise<EquipmentData[]> {
    if (!equipmentNames || equipmentNames.length === 0) {
      console.log('‚ö†Ô∏è [EquipmentFetcher] Nenhum equipamento fornecido para busca');
      return [];
    }

    console.log('üîç [EquipmentFetcher] Iniciando busca de equipamentos:', equipmentNames);

    try {
      let allEquipments: EquipmentData[] = [];
      
      for (const equipmentName of equipmentNames) {
        if (!equipmentName || equipmentName.trim() === '') {
          console.log('‚ö†Ô∏è [EquipmentFetcher] Nome de equipamento vazio, pulando...');
          continue;
        }

        const cleanName = equipmentName.trim();
        console.log(`üîç [EquipmentFetcher] Buscando: "${cleanName}"`);

        // Busca mais robusta - m√∫ltiplas tentativas
        const searchVariations = [
          cleanName,
          cleanName.toLowerCase(),
          cleanName.toUpperCase(),
          // Para casos como "Unyque PRO", buscar tamb√©m "Unyque" 
          cleanName.split(' ')[0],
          // Remover caracteres especiais
          cleanName.replace(/[^\w\s]/gi, ''),
        ];

        for (const variation of searchVariations) {
          if (!variation || variation.length < 2) continue;

          console.log(`üîç [EquipmentFetcher] Tentativa de busca: "${variation}"`);
          
          const { data: equipment, error: equipmentError } = await supabase
            .from('equipamentos')
            .select('id, nome, tecnologia, indicacoes, beneficios, diferenciais, categoria')
            .or(`nome.ilike.%${variation}%,tecnologia.ilike.%${variation}%`)
            .eq('ativo', true);

          if (equipmentError) {
            console.error(`‚ùå [EquipmentFetcher] Erro na busca para "${variation}":`, equipmentError);
            continue;
          }

          if (equipment && equipment.length > 0) {
            console.log(`‚úÖ [EquipmentFetcher] Encontrado ${equipment.length} resultado(s) para "${variation}"`);
            equipment.forEach(eq => {
              console.log(`üìã [EquipmentFetcher] Encontrado: ${eq.nome} (${eq.tecnologia})`);
              // Evitar duplicatas
              if (!allEquipments.find(existing => existing.id === eq.id)) {
                allEquipments.push(eq);
              }
            });
            break; // Se encontrou com esta varia√ß√£o, n√£o precisa testar outras
          }
        }
      }

      if (allEquipments.length === 0) {
        console.warn('‚ö†Ô∏è [EquipmentFetcher] NENHUM equipamento encontrado ap√≥s todas as tentativas para:', equipmentNames);
        
        // Log adicional para debug - mostrar equipamentos dispon√≠veis
        const { data: availableEquipments } = await supabase
          .from('equipamentos')
          .select('nome')
          .eq('ativo', true)
          .limit(10);
        
        console.log('üìã [EquipmentFetcher] Equipamentos dispon√≠veis no banco (amostra):', 
          availableEquipments?.map(eq => eq.nome) || 'Nenhum');
        
        return [];
      }

      console.log(`‚úÖ [EquipmentFetcher] SUCESSO: ${allEquipments.length} equipamento(s) encontrado(s)`);
      allEquipments.forEach(eq => {
        console.log(`üìã [EquipmentFetcher] FINAL: ${eq.nome} | Tecnologia: ${eq.tecnologia} | Indica√ß√µes: ${eq.indicacoes?.substring(0, 100)}...`);
      });

      return allEquipments;
    } catch (fetchError) {
      console.error('‚ùå [EquipmentFetcher] Erro cr√≠tico na busca:', fetchError);
      return [];
    }
  }

  static buildEquipmentPromptSection(equipments: EquipmentData[]): string {
    if (equipments.length === 0) {
      return `
üö® REGRA CR√çTICA DE EQUIPAMENTOS:
- NENHUM equipamento v√°lido encontrado no banco de dados
- N√ÉO mencione equipamentos espec√≠ficos que n√£o existem
- N√ÉO invente informa√ß√µes sobre equipamentos
- Use termos gen√©ricos como "nossos tratamentos" ou "tecnologias avan√ßadas"
- NUNCA associe caracter√≠sticas de um equipamento a outro
      `;
    }

    const equipmentList = equipments.map(eq => `
üìã ${eq.nome}:
- Tecnologia: ${eq.tecnologia}
- Indica√ß√µes: ${eq.indicacoes}
- Benef√≠cios: ${eq.beneficios}
- Diferenciais: ${eq.diferenciais}
    `).join('\n');

    const equipmentNames = equipments.map(eq => eq.nome).join(', ');

    return `
üö® REGRA CR√çTICA DE EQUIPAMENTOS:
- OBRIGAT√ìRIO: Mencione APENAS os equipamentos listados: ${equipmentNames}
- Use EXATAMENTE os nomes e tecnologias fornecidas
- N√ÉO invente caracter√≠sticas que n√£o est√£o listadas
- N√ÉO misture informa√ß√µes de equipamentos diferentes
- N√ÉO mencione "canetas emagrecedoras" se n√£o estiver nas especifica√ß√µes

üìã EQUIPAMENTOS DISPON√çVEIS:
${equipmentList}

‚ö†Ô∏è VALIDA√á√ÉO CR√çTICA: 
- Use APENAS as informa√ß√µes fornecidas acima
- N√ÉO adicione equipamentos ou tecnologias n√£o listadas
- N√ÉO associe caracter√≠sticas de outros equipamentos
    `;
  }
}
