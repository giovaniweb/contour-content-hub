
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üöÄ Edge function generate-marketing-diagnostic iniciada');
  console.log('üìù Method:', req.method);
  console.log('üîë OpenAI API Key configurada:', openAIApiKey ? 'SIM' : 'N√ÉO');
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Respondendo OPTIONS request');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üì• Recebendo dados do diagn√≥stico...');
    const diagnosticData = await req.json();
    console.log('üìä Dados recebidos:', JSON.stringify(diagnosticData, null, 2));

    if (!openAIApiKey) {
      console.error('‚ùå OPENAI_API_KEY n√£o configurada!');
      return new Response(JSON.stringify({ 
        error: 'OPENAI_API_KEY n√£o configurada',
        success: false,
        details: 'Configure a chave da OpenAI nas configura√ß√µes do projeto'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const prompt = createConsultorFluidaPrompt(diagnosticData);
    console.log('üìù Prompt criado, tamanho:', prompt.length);

    console.log('ü§ñ Chamando OpenAI API...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { 
            role: 'system', 
            content: `Voc√™ √© o CONSULTOR FLUIDA ‚Äî um estrategista de marketing especializado em cl√≠nicas m√©dicas e est√©ticas, com foco total em atrair, encantar e fidelizar o p√∫blico final.

üîê REGRAS DE ACESSO IMPORTANTES:
- Se for CL√çNICA M√âDICA: pode sugerir TODOS os equipamentos (m√©dicos e est√©ticos)
- Se for CL√çNICA EST√âTICA: pode sugerir APENAS equipamentos est√©ticos
- NUNCA sugira equipamentos m√©dicos (CO2 Fracionado, Ultrassom microfocado, Intradermoterapia) para cl√≠nicas est√©ticas

Use linguagem emocional, acess√≠vel e inspira√ß√£o pr√°tica. Foque em conte√∫do para Instagram, TikTok e YouTube Shorts.` 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.85,
        max_tokens: 4000
      }),
    });

    console.log('üì° Resposta OpenAI status:', response.status);
    
    if (!response.ok) {
      console.error('‚ùå OpenAI API error:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('‚ùå OpenAI error body:', errorText);
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Resposta OpenAI recebida');
    console.log('üìä Usage:', data.usage);
    
    const diagnosticResult = data.choices[0].message.content;
    console.log('üìù Diagn√≥stico gerado, tamanho:', diagnosticResult?.length || 0);

    return new Response(JSON.stringify({ 
      diagnostic: diagnosticResult,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('üí• Error generating diagnostic:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro ao gerar diagn√≥stico com IA',
      success: false,
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function createConsultorFluidaPrompt(data: any): string {
  const tipoClinica = data.clinicType === 'clinica_medica' ? 'M√©dica' : 'Est√©tica';
  const isClinicaMedica = data.clinicType === 'clinica_medica';
  
  // Filtrar equipamentos baseado no tipo de cl√≠nica
  let equipamentosDisponiveis = '';
  if (data.equipments && Array.isArray(data.equipments)) {
    const equipamentosFiltrados = data.equipments.filter(eq => {
      if (isClinicaMedica) {
        // Cl√≠nica m√©dica pode ver todos os equipamentos
        return true;
      } else {
        // Cl√≠nica est√©tica s√≥ pode ver equipamentos est√©ticos
        return eq.categoria === 'estetico';
      }
    });
    
    equipamentosDisponiveis = equipamentosFiltrados.length > 0 
      ? equipamentosFiltrados.map(eq => `${eq.nome} (${eq.categoria})`).join(', ')
      : 'Nenhum equipamento cadastrado para este perfil';
  }
  
  // Identificar equipamentos mencionados pelo usu√°rio
  let equipamentosUsuario = '';
  if (data.clinicType === 'clinica_medica') {
    equipamentosUsuario = data.medicalEquipments || 'N√£o informado';
  } else {
    equipamentosUsuario = data.aestheticEquipments || 'N√£o informado';
  }
  
  // Identificar problemas/protocolos
  let problemasProtocolos = '';
  if (data.clinicType === 'clinica_medica') {
    problemasProtocolos = `${data.medicalProblems || ''} - Protocolo mais procurado: ${data.medicalMostSought || ''}`;
  } else {
    problemasProtocolos = `${data.aestheticProblems || ''} - Protocolo mais vendido: ${data.aestheticBestSeller || ''}`;
  }
  
  const publicoIdeal = data.targetAudience || 'N√£o definido claramente';
  const estilo = data.communicationStyle || 'N√£o definido';
  const faturamentoAtual = formatRevenue(data.currentRevenue);
  const meta = formatGoal(data.revenueGoal);
  
  // Dados espec√≠ficos do tipo de cl√≠nica
  let dadosEspecificos = '';
  if (data.clinicType === 'clinica_medica') {
    dadosEspecificos = `
- Especialidade: ${data.medicalSpecialty || 'N√£o informado'}
- Procedimentos: ${data.medicalProcedures || 'N√£o informado'}
- Ticket m√©dio: ${data.medicalTicket || 'N√£o informado'}
- Modelo de vendas: ${data.medicalSalesModel || 'N√£o informado'}
- Objetivo principal: ${data.medicalObjective || 'N√£o informado'}
- Aparece em v√≠deos: ${data.medicalVideoFrequency || 'N√£o informado'}
- Estilo da cl√≠nica: ${data.medicalClinicStyle || 'N√£o informado'}`;
  } else {
    dadosEspecificos = `
- Foco de atua√ß√£o: ${data.aestheticFocus || 'N√£o informado'}
- Ticket m√©dio: ${data.aestheticTicket || 'N√£o informado'}
- Modelo de vendas: ${data.aestheticSalesModel || 'N√£o informado'}
- Objetivo principal: ${data.aestheticObjective || 'N√£o informado'}
- Aparece em v√≠deos: ${data.aestheticVideoFrequency || 'N√£o informado'}
- Estilo da cl√≠nica: ${data.aestheticClinicStyle || 'N√£o informado'}`;
  }

  const prompt = `CONSULTOR FLUIDA com Especialistas Inteligentes (para Dashboard)

Voc√™ √© o CONSULTOR FLUIDA ‚Äî um estrategista de marketing para cl√≠nicas est√©ticas e cl√≠nicas m√©dicas.

Com base no briefing a seguir, execute as etapas abaixo:

---

üì• Dados de entrada:
- Tipo de cl√≠nica: ${tipoClinica}
- Equipamentos utilizados: ${equipamentosUsuario}
- Equipamentos dispon√≠veis no sistema: ${equipamentosDisponiveis}
- Problemas/Protocolos: ${problemasProtocolos}
- P√∫blico ideal: ${publicoIdeal}
- Estilo de linguagem: ${estilo}
- Faturamento atual: ${faturamentoAtual}
- Meta de faturamento: ${meta}
- Frequ√™ncia de conte√∫do: ${data.contentFrequency || 'N√£o informado'}

**Dados espec√≠ficos:**
${dadosEspecificos}

---

üîê REGRAS DE ACESSO IMPORTANTES:
- Tipo de cl√≠nica detectado: ${tipoClinica}
- ${isClinicaMedica ? 'CL√çNICA M√âDICA: pode sugerir TODOS os equipamentos (m√©dicos e est√©ticos)' : 'CL√çNICA EST√âTICA: pode sugerir APENAS equipamentos est√©ticos'}
- ${!isClinicaMedica ? 'NUNCA sugira equipamentos m√©dicos (CO2 Fracionado, Ultrassom microfocado, Intradermoterapia) para esta cl√≠nica' : ''}

---

üìä Etapa 1 ‚Äì Diagn√≥stico Estrat√©gico:
Gere um texto consultivo apontando os principais gargalos e oportunidades, com base no perfil da cl√≠nica.

---

üí° Etapa 2 ‚Äì Sugest√µes de Conte√∫do:
Gere 3 a 5 ideias pr√°ticas de Reels, Shorts ou TikTok, com linguagem adaptada ao perfil.
Inclua 1 ideia envolvendo o uso de equipamentos, se aplic√°vel.

---

üìÖ Etapa 3 ‚Äì Plano de A√ß√£o (3 semanas):
- Semana 1: Autoridade e Presen√ßa
- Semana 2: Prova Social e Conex√£o  
- Semana 3: Convers√£o e Campanha
Inclua 3 a√ß√µes pr√°ticas por semana.

---

üé® Etapa 4 ‚Äì Avalia√ß√£o de Marca:
Analise logo, paleta de cores, tom de voz, atendimento e harmonia visual.
Sugira melhorias + programa de indica√ß√£o + humaniza√ß√£o da jornada.

---

üß† Etapa 5 ‚Äì Ativa√ß√£o de Especialistas:
Escolha de 2 a 4 especialistas abaixo com base no diagn√≥stico.
Para cada um, gere:
- Nome do especialista
- Miss√£o dele no caso da cl√≠nica
- Mini diagn√≥stico do motivo de sua convoca√ß√£o
- Uma a√ß√£o pr√°tica que ele recomenda

Especialistas dispon√≠veis:

1. Expert em Convers√£o ‚Äî foco em leads e agendamento
2. Especialista em Storytelling ‚Äî autoridade emocional
3. Consultor Criativo ‚Äî ideias virais e campanhas
4. Gestor de Tr√°fego ‚Äî an√∫ncios e performance
5. Especialista em Posicionamento ‚Äî clareza da promessa
6. Expert em Fideliza√ß√£o ‚Äî aumentar retorno e recorr√™ncia
7. Harmonizador de Marca ‚Äî logotipo, visual e encantamento

---

üß© Etapa 6 ‚Äì Enigma do Mentor:
Crie um trocadilho divertido com o sobrenome do mentor usado, sem citar o nome.
Exemplo: "Esse plano foi guiado por algu√©m que transforma estrat√©gia em ladainha... convincente."

---

‚ö†Ô∏è Regras finais:
- N√£o cite o nome do mentor
- Linguagem humana, consultiva e pr√°tica
- Foco 100% no cliente final da cl√≠nica
- N√£o sugerir lives, webinars ou blogs
- Todo conte√∫do deve funcionar em Instagram, TikTok ou Shorts
- **IMPORTANTE:** Respeite o controle de acesso - ${!isClinicaMedica ? 'N√ÉO sugira equipamentos m√©dicos para cl√≠nica est√©tica' : 'Pode sugerir qualquer equipamento'}`;

  return prompt;
}

function formatRevenue(revenue: string): string {
  const revenueMap: { [key: string]: string } = {
    'ate_15k': 'At√© R$ 15.000',
    '15k_30k': 'R$ 15.000 - R$ 30.000',
    '30k_60k': 'R$ 30.000 - R$ 60.000',
    'acima_60k': 'Acima de R$ 60.000'
  };
  return revenueMap[revenue] || revenue || 'N√£o informado';
}

function formatGoal(goal: string): string {
  const goalMap: { [key: string]: string } = {
    'crescer_30': 'Crescer 30%',
    'crescer_50': 'Crescer 50%',
    'dobrar': 'Dobrar o faturamento',
    'triplicar': 'Triplicar o faturamento',
    'manter_estavel': 'Manter estabilidade'
  };
  return goalMap[goal] || goal || 'N√£o informado';
}
