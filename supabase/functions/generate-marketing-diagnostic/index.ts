
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üéØ CONSULTOR FLUIDA - Diagn√≥stico iniciado');
  console.log('üìù Method:', req.method);
  console.log('üîë OpenAI Key present:', !!openAIApiKey);
  
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const diagnosticData = await req.json();
    console.log('üìä Dados do diagn√≥stico recebidos:', JSON.stringify(diagnosticData, null, 2));

    // Valida√ß√£o da chave OpenAI
    if (!openAIApiKey) {
      console.error('‚ùå OPENAI_API_KEY n√£o configurada!');
      return new Response(JSON.stringify({ 
        diagnostic: generateFallbackDiagnostic(diagnosticData),
        success: false,
        fallback: true,
        error: 'OPENAI_API_KEY n√£o configurada'
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Criar prompt consolidado seguindo as especifica√ß√µes completas
    const prompt = createConsolidatedFluidaPrompt(diagnosticData);
    console.log('üìù Prompt consolidado criado, tamanho:', prompt.length);

    console.log('üåê Iniciando chamada OpenAI...');
    
    // Configura√ß√µes corrigidas com timeout de 60s
    const requestBody = {
      model: 'gpt-4',
      messages: [
        { 
          role: 'system', 
          content: getConsolidatedSystemPrompt()
        },
        { role: 'user', content: prompt }
      ],
      temperature: 0.7,
      max_tokens: 4000 // Aumentado para garantir resposta completa
    };

    console.log('üì¶ Request configurado:', { model: requestBody.model, max_tokens: requestBody.max_tokens });
    
    // Chamada para OpenAI com timeout controlado de 60s
    const controller = new AbortController();
    const timeoutId = setTimeout(() => {
      console.log('‚è∞ Timeout de 60s atingido');
      controller.abort();
    }, 60000);
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      signal: controller.signal,
      body: JSON.stringify(requestBody),
    });

    clearTimeout(timeoutId);
    console.log('üì° Status da resposta OpenAI:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå OpenAI API error:', response.status, errorText);
      
      return new Response(JSON.stringify({ 
        diagnostic: generateFallbackDiagnostic(diagnosticData),
        success: false,
        fallback: true,
        error: `OpenAI Error ${response.status}: ${errorText}`
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const data = await response.json();
    console.log('üìÑ Resposta OpenAI recebida com sucesso');
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Estrutura de resposta inv√°lida da OpenAI');
      return new Response(JSON.stringify({ 
        diagnostic: generateFallbackDiagnostic(diagnosticData),
        success: false,
        fallback: true,
        error: 'Estrutura de resposta inv√°lida'
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const diagnosticResult = data.choices[0].message.content;
    console.log('‚úÖ Diagn√≥stico gerado com sucesso, tamanho:', diagnosticResult?.length || 0);

    // Validar se o diagn√≥stico tem a estrutura obrigat√≥ria das 6 se√ß√µes
    const hasRequiredSections = validateDiagnosticStructure(diagnosticResult);
    if (!hasRequiredSections) {
      console.warn('‚ö†Ô∏è Diagn√≥stico n√£o possui estrutura completa, usando fallback');
      return new Response(JSON.stringify({ 
        diagnostic: generateFallbackDiagnostic(diagnosticData),
        success: false,
        fallback: true,
        error: 'Estrutura incompleta no diagn√≥stico'
      }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    return new Response(JSON.stringify({ 
      diagnostic: diagnosticResult,
      success: true,
      timestamp: new Date().toISOString(),
      model_used: 'gpt-4',
      clinic_type: diagnosticData.clinicType,
      equipments_validated: await validateEquipments(diagnosticData)
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
    
  } catch (error) {
    console.error('üí• Erro geral:', error);
    
    return new Response(JSON.stringify({ 
      diagnostic: generateFallbackDiagnostic(diagnosticData || {}),
      success: false,
      fallback: true,
      error: error.message || 'Erro desconhecido',
      error_details: error.name === 'AbortError' ? 'Timeout na chamada da OpenAI (60s)' : 'Erro interno'
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function getConsolidatedSystemPrompt(): string {
  return `Voc√™ √© o CONSULTOR FLUIDA ‚Äî estrategista oficial da plataforma para cl√≠nicas est√©ticas e m√©dicas.

Sua miss√£o √© gerar um diagn√≥stico completo com base nas respostas fornecidas, adaptando a linguagem e recomenda√ß√µes ao tipo de cl√≠nica (m√©dica ou est√©tica).

‚ö†Ô∏è ESTRUTURA OBRIGAT√ìRIA (usar EXATAMENTE estes t√≠tulos e emojis):

## üìä Diagn√≥stico Estrat√©gico da Cl√≠nica
[Identifique gargalos, analise desalinhamento entre p√∫blico/oferta/visual/autoridade, use tom consultivo adaptado]

## üí° Sugest√µes de Conte√∫do Personalizado
[3-5 ideias pr√°ticas SOMENTE para Instagram, Reels, TikTok, Shorts - incluir pelo menos 3 ideias com equipamentos citados]

## üìÖ Plano de A√ß√£o Semanal
Semana 1: Autoridade e visibilidade
Semana 2: Prova social e diferencial  
Semana 3: Convers√£o e campanha
Semana 4: Acelera√ß√£o e fideliza√ß√£o
[3-4 tarefas pr√°ticas por semana]

## üé® Avalia√ß√£o de Marca e Atendimento
[Avalie identidade visual, atendimento vs posicionamento, sugira melhorias e programa de indica√ß√£o]

## üß© Enigma do Mentor
[Frase misteriosa com trocadilho - NUNCA revele o nome verdadeiro do mentor]

## üìà Insights Estrat√©gicos Fluida
[3-5 insights pr√°ticos com tom de consultoria]

üéØ Fluxo de Segmenta√ß√£o:
- Cl√≠nica M√©dica ‚Üí Pode ver todos os equipamentos
- Cl√≠nica Est√©tica ‚Üí Apenas equipamentos n√£o invasivos

Use a linguagem adequada:
- Cl√≠nica m√©dica = t√©cnico-consultiva
- Cl√≠nica est√©tica = emocional-inspiradora

‚ö†Ô∏è RESTRI√á√ïES:
- Proibido citar live, blog, ebook ou webinar
- Tudo deve caber em conte√∫do de rede social
- Use linguagem adaptada: m√©dica = t√©cnico-consultivo, est√©tica = emocional-inspirador
- N√£o alucine equipamentos ou formatos n√£o citados
- Continue sempre a partir da estrutura atual

‚ö†Ô∏è IMPORTANTE: Siga EXATAMENTE a estrutura das 6 se√ß√µes obrigat√≥rias com os t√≠tulos e emojis especificados.

SEMPRE gere um diagn√≥stico completo e estruturado, mesmo com dados limitados.`;
}

function createConsolidatedFluidaPrompt(data: any): string {
  const tipoClinica = data.clinicType === 'clinica_medica' ? 'M√©dica' : 'Est√©tica';
  const isClinicaMedica = data.clinicType === 'clinica_medica';
  
  // Detectar dados principais com base no tipo de cl√≠nica
  const especialidade = isClinicaMedica 
    ? (data.medicalSpecialty || 'N√£o informado')
    : (data.aestheticFocus || 'N√£o informado');

  const procedimentos = isClinicaMedica
    ? (data.medicalProcedures || 'N√£o informado')
    : (data.aestheticTreatments || 'N√£o informado');

  const equipamentos = isClinicaMedica
    ? (data.medicalEquipments || 'N√£o informado')
    : (data.aestheticEquipments || 'N√£o informado');

  const protocolo = isClinicaMedica
    ? (data.medicalBestSeller || 'N√£o informado')
    : (data.aestheticBestSeller || 'N√£o informado');

  const ticketMedio = isClinicaMedica
    ? formatMedicalTicket(data.medicalTicket)
    : formatAestheticTicket(data.aestheticTicket);

  const objetivo = isClinicaMedica
    ? formatMedicalObjective(data.medicalObjective)
    : formatAestheticObjective(data.aestheticObjective);

  const modelo_venda = isClinicaMedica
    ? (data.medicalSalesModel || 'N√£o informado')
    : (data.aestheticSalesModel || 'N√£o informado');

  const frequencia = data.contentFrequency || 'N√£o informado';
  const faturamento = formatRevenue(data.currentRevenue);
  const meta = formatGoal(data.revenueGoal);
  const publicoIdeal = data.targetAudience || 'N√£o definido';
  const estiloClinica = data.clinicType === 'clinica_medica' ? data.medicalClinicStyle : data.aestheticClinicStyle || 'N√£o definido';
  const desafios = data.mainChallenges || 'N√£o informado';
  const estiloLinguagem = data.communicationStyle || (isClinicaMedica ? 't√©cnico-consultivo' : 'emocional e inspirador');
  const apareceVideos = data.contentFrequency === 'diario' ? 'Sim' : 'Raramente';

  const prompt = `üéØ CONSULTOR FLUIDA - DIAGN√ìSTICO PERSONALIZADO

üìã Dados de briefing dispon√≠veis:

- Tipo: ${tipoClinica}
- Especialidade: ${especialidade}
- Procedimentos: ${procedimentos}
- Equipamentos: ${equipamentos}
- Protocolo mais vendido: ${protocolo}
- Ticket m√©dio: ${ticketMedio}
- Modelo de venda: ${modelo_venda}
- Faturamento atual: ${faturamento}
- Meta 3 meses: ${meta}
- Objetivo de marketing: ${objetivo}
- Frequ√™ncia de conte√∫do: ${frequencia}
- Aparece nos v√≠deos: ${apareceVideos}
- P√∫blico ideal: ${publicoIdeal}
- Estilo da cl√≠nica: ${estiloClinica}
- Estilo de linguagem desejado: ${estiloLinguagem}
- Principais desafios: ${desafios}

üéØ GERE UM DIAGN√ìSTICO COMPLETO SEGUINDO A ESTRUTURA OBRIGAT√ìRIA:

## üìä Diagn√≥stico Estrat√©gico da Cl√≠nica
[Identifique gargalos, analise desalinhamento entre p√∫blico/oferta/visual/autoridade, use tom consultivo adaptado]

## üí° Sugest√µes de Conte√∫do Personalizado
[3-5 ideias pr√°ticas SOMENTE para Instagram, Reels, TikTok, Shorts - incluir pelo menos 3 ideias com equipamentos citados]

## üìÖ Plano de A√ß√£o Semanal
Semana 1: Autoridade e visibilidade
Semana 2: Prova social e diferencial  
Semana 3: Convers√£o e campanha
Semana 4: Acelera√ß√£o e fideliza√ß√£o
[3-4 tarefas pr√°ticas por semana]

## üé® Avalia√ß√£o de Marca e Atendimento
[Avalie identidade visual, atendimento vs posicionamento, sugira melhorias e programa de indica√ß√£o]

## üß© Enigma do Mentor
[Frase misteriosa com trocadilho - NUNCA revele o nome verdadeiro do mentor]

## üìà Insights Estrat√©gicos Fluida
[3-5 insights pr√°ticos com tom de consultoria]

Use a linguagem adequada:
- ${isClinicaMedica ? 'T√âCNICO-CONSULTIVA (cl√≠nica m√©dica)' : 'EMOCIONAL-INSPIRADORA (cl√≠nica est√©tica)'}

Foque nos equipamentos mencionados: ${equipamentos}

Personalize tudo com base no perfil fornecido acima.

‚ö†Ô∏è IMPORTANTE: Siga EXATAMENTE a estrutura das 6 se√ß√µes obrigat√≥rias com os t√≠tulos e emojis especificados.`;

  return prompt;
}

// Fun√ß√£o para validar se o diagn√≥stico tem as 6 se√ß√µes obrigat√≥rias
function validateDiagnosticStructure(diagnostic: string): boolean {
  const requiredSections = [
    'üìä Diagn√≥stico Estrat√©gico da Cl√≠nica',
    'üí° Sugest√µes de Conte√∫do Personalizado',
    'üìÖ Plano de A√ß√£o Semanal',
    'üé® Avalia√ß√£o de Marca e Atendimento',
    'üß© Enigma do Mentor',
    'üìà Insights Estrat√©gicos Fluida'
  ];
  
  let foundSections = 0;
  requiredSections.forEach(section => {
    if (diagnostic.includes(section)) {
      foundSections++;
    }
  });
  
  console.log(`üîç Estrutura validada: ${foundSections}/6 se√ß√µes encontradas`);
  return foundSections >= 5; // Aceita se pelo menos 5 das 6 se√ß√µes est√£o presentes
}

// Fun√ß√£o para gerar fallback estruturado
function generateFallbackDiagnostic(data: any): string {
  const tipoClinica = data.clinicType === 'clinica_medica' ? 'M√©dica' : 'Est√©tica';
  const isClinicaMedica = data.clinicType === 'clinica_medica';
  
  return `## üìä Diagn√≥stico Estrat√©gico da Cl√≠nica

‚ö†Ô∏è **Gera√ß√£o autom√°tica indispon√≠vel. Exibindo sugest√µes padr√£o com base no seu perfil.**

**Tipo:** Cl√≠nica ${tipoClinica}
**An√°lise:** Sua cl√≠nica possui potencial de crescimento. ${isClinicaMedica ? 'Como cl√≠nica m√©dica, o foco deve ser autoridade cient√≠fica e credibilidade.' : 'Como cl√≠nica est√©tica, o foco deve ser transforma√ß√£o visual e experi√™ncia do cliente.'}

## üí° Sugest√µes de Conte√∫do Personalizado

1. **Posts educativos** sobre ${isClinicaMedica ? 'procedimentos m√©dicos' : 'tratamentos est√©ticos'}
2. **Antes e depois** de casos reais (respeitando privacidade)
3. **Stories com dicas** r√°pidas e pr√°ticas
4. **Reels explicativos** sobre diferenciais da cl√≠nica

## üìÖ Plano de A√ß√£o Semanal

**Semana 1:** Estruturar linha editorial
**Semana 2:** Criar conte√∫do de autoridade
**Semana 3:** Implementar campanhas de capta√ß√£o
**Semana 4:** Otimizar e mensurar resultados

## üé® Avalia√ß√£o de Marca e Atendimento

- Revisar identidade visual
- Alinhar atendimento com posicionamento
- Criar programa de indica√ß√£o

## üß© Enigma do Mentor

"Quem planta consist√™ncia, colhe resultados duradouros..."

## üìà Insights Estrat√©gicos Fluida

- Consist√™ncia na comunica√ß√£o √© fundamental
- ${isClinicaMedica ? 'Autoridade t√©cnica gera confian√ßa' : 'Transforma√ß√£o visual gera desejo'}
- Investir em relacionamento com pacientes

---
*Diagn√≥stico temporariamente indispon√≠vel. Suas respostas foram salvas e voc√™ pode tentar novamente em instantes.*`;
}

// Fun√ß√£o para validar equipamentos (simples, pode ser expandida)
async function validateEquipments(data: any): Promise<string[]> {
  const equipments = data.clinicType === 'clinica_medica' 
    ? (data.medicalEquipments || '')
    : (data.aestheticEquipments || '');
    
  if (!equipments) return [];
  
  // Lista b√°sica de equipamentos conhecidos (pode ser expandida)
  const knownEquipments = [
    'unyque_pro', 'reverso', 'enygma', 'crystal_3d_plus', 'crio', 'multishape',
    'laser_co2', 'microagulhamento', 'peeling_quimico', 'toxina_botulinica',
    'preenchimento', 'sculptra', 'harmonizacao_facial', 'criolipolise',
    'ad√©lla_laser', 'lasers_co2'
  ];
  
  return equipments.split(',').map((eq: string) => eq.trim()).filter((eq: string) => 
    knownEquipments.includes(eq.toLowerCase().replace(' ', '_'))
  );
}

// Fun√ß√µes auxiliares de formata√ß√£o (mantidas iguais)
function formatRevenue(revenue: string): string {
  const map: { [key: string]: string } = {
    'ate_15k': 'At√© R$ 15.000/m√™s',
    '15k_30k': 'R$ 15.000 - R$ 30.000/m√™s',
    '30k_60k': 'R$ 30.000 - R$ 60.000/m√™s',
    'acima_60k': 'Acima de R$ 60.000/m√™s'
  };
  return map[revenue] || revenue || 'N√£o informado';
}

function formatGoal(goal: string): string {
  const map: { [key: string]: string } = {
    'crescer_30': 'Crescer 30% em 3 meses',
    'crescer_50': 'Crescer 50% em 3 meses',
    'dobrar': 'Dobrar em 6 meses',
    'triplicar': 'Triplicar em 1 ano',
    'manter_estavel': 'Manter estabilidade'
  };
  return map[goal] || goal || 'N√£o informado';
}

function formatMedicalObjective(objective: string): string {
  const map: { [key: string]: string } = {
    'autoridade_medica': 'Aumentar autoridade m√©dica',
    'escalar_consultorio': 'Escalar consult√≥rio',
    'fidelizar_pacientes': 'Melhorar reten√ß√£o de pacientes',
    'diferenciar_mercado': 'Diferenciar no mercado'
  };
  return map[objective] || objective || 'N√£o informado';
}

function formatAestheticObjective(objective: string): string {
  const map: { [key: string]: string } = {
    'atrair_leads': 'Atrair leads qualificados',
    'aumentar_recorrencia': 'Aumentar recorr√™ncia',
    'elevar_ticket': 'Aumentar ticket m√©dio',
    'autoridade_regiao': 'Ser refer√™ncia na regi√£o'
  };
  return map[objective] || objective || 'N√£o informado';
}

function formatMedicalTicket(ticket: string): string {
  const map: { [key: string]: string } = {
    'ate_500': 'At√© R$ 500',
    '500_1500': 'R$ 500 - R$ 1.500',
    '1500_3000': 'R$ 1.500 - R$ 3.000',
    '3000_5000': 'R$ 3.000 - R$ 5.000',
    'acima_5000': 'Acima de R$ 5.000'
  };
  return map[ticket] || ticket || 'N√£o informado';
}

function formatAestheticTicket(ticket: string): string {
  const map: { [key: string]: string } = {
    'ate_150': 'At√© R$ 150',
    '150_300': 'R$ 150 - R$ 300',
    '300_600': 'R$ 300 - R$ 600',
    '600_1000': 'R$ 600 - R$ 1.000',
    'acima_1000': 'Acima de R$ 1.000'
  };
  return map[ticket] || ticket || 'N√£o informado';
}
