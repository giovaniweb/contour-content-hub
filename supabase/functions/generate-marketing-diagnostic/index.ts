
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üöÄ CONSULTOR FLUIDA - Diagn√≥stico iniciado');
  console.log('üìù Method:', req.method);
  
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const diagnosticData = await req.json();
    console.log('üìä Dados do diagn√≥stico recebidos');

    if (!openAIApiKey) {
      console.error('‚ùå OPENAI_API_KEY n√£o configurada!');
      return new Response(JSON.stringify({ 
        error: 'OPENAI_API_KEY n√£o configurada',
        success: false 
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const prompt = createConsultorFluidaPrompt(diagnosticData);
    console.log('üìù Prompt do Consultor Fluida criado');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { 
            role: 'system', 
            content: `üß† Voc√™ √© o CONSULTOR FLUIDA ‚Äî estrategista oficial da plataforma para cl√≠nicas est√©ticas e m√©dicas.

Sua miss√£o √© gerar um diagn√≥stico completo seguindo EXATAMENTE as 6 etapas estruturadas:

1. üìä Diagn√≥stico Estrat√©gico da Cl√≠nica
2. üí° Sugest√µes de Conte√∫do Personalizado (somente Instagram, Reels, TikTok, Shorts)
3. üìÖ Plano de A√ß√£o Semanal (4 semanas)
4. üé® Avalia√ß√£o de Marca e Atendimento
5. üß© Enigma do Mentor
6. üìà Insights Estrat√©gicos Fluida

‚ö†Ô∏è REGRAS CR√çTICAS:
- Use EXATAMENTE esses t√≠tulos com emojis para cada se√ß√£o
- Conte√∫do apenas para Instagram/TikTok/Shorts (nunca blog, webinar, live)
- Adapte linguagem: M√©dica = t√©cnica/autoridade | Est√©tica = emocional/humanizada
- Inclua pelo menos 3 ideias de conte√∫do usando equipamentos citados
- Plano de 4 semanas com 3-4 tarefas pr√°ticas por semana
- Enigma sem revelar nome do mentor
- Insights pr√°ticos e consultivos

üéØ Fluxo de Segmenta√ß√£o:
- Cl√≠nica M√©dica ‚Üí Pode ver todos os equipamentos
- Cl√≠nica Est√©tica ‚Üí Apenas equipamentos n√£o invasivos
- Infer√™ncia: Unyque PRO/Reverso/Enygma = M√âDICA | Crystal 3D/Crio/Multishape = EST√âTICA` 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.85,
        max_tokens: 4000
      }),
    });

    if (!response.ok) {
      console.error('‚ùå OpenAI API error:', response.status);
      const errorText = await response.text();
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const diagnosticResult = data.choices[0].message.content;
    console.log('‚úÖ Diagn√≥stico Fluida gerado com sucesso');

    return new Response(JSON.stringify({ 
      diagnostic: diagnosticResult,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('üí• Erro no Consultor Fluida:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro ao gerar diagn√≥stico com IA',
      success: false,
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function createConsultorFluidaPrompt(data: any): string {
  const tipoClinica = data.clinicType === 'clinica_medica' ? 'M√©dica' : 'Est√©tica';
  const isClinicaMedica = data.clinicType === 'clinica_medica';
  
  // Detectar especialidade/foco principal
  const especialidade = isClinicaMedica 
    ? (data.medicalSpecialty || 'N√£o informado')
    : (data.aestheticFocus || 'N√£o informado');

  // Detectar procedimentos principais
  const procedimentos = isClinicaMedica
    ? (data.medicalProcedures || 'N√£o informado')
    : (data.aestheticBestSeller || 'N√£o informado');

  // Detectar equipamentos utilizados
  const equipamentos = isClinicaMedica
    ? (data.medicalEquipments || 'N√£o informado')
    : (data.aestheticEquipments || 'N√£o informado');

  // Detectar protocolo mais vendido
  const protocolo = isClinicaMedica
    ? (data.medicalBestSeller || 'N√£o informado')
    : (data.aestheticBestSeller || 'N√£o informado');

  // Detectar ticket m√©dio
  const ticketMedio = isClinicaMedica
    ? formatMedicalTicket(data.medicalTicket)
    : formatAestheticTicket(data.aestheticTicket);

  // Detectar modelo de vendas
  const modeloVenda = isClinicaMedica
    ? (data.medicalSalesModel || 'N√£o informado')
    : (data.aestheticSalesModel || 'N√£o informado');

  // Detectar objetivo principal
  const objetivo = isClinicaMedica
    ? formatMedicalObjective(data.medicalObjective)
    : formatAestheticObjective(data.aestheticObjective);

  // Detectar frequ√™ncia de conte√∫do
  const frequencia = isClinicaMedica
    ? (data.medicalContentFrequency || data.contentFrequency || 'N√£o informado')
    : (data.aestheticContentFrequency || data.contentFrequency || 'N√£o informado');

  // Detectar se aparece nos v√≠deos
  const apareceVideos = detectaAparicaoVideos(data);

  // Detectar estilo da cl√≠nica
  const estiloClinica = isClinicaMedica
    ? (data.medicalClinicStyle || 'N√£o definido')
    : (data.aestheticClinicStyle || 'N√£o definido');

  const prompt = `üéØ CONSULTOR FLUIDA - PROMPT FINAL
Gere um diagn√≥stico estrat√©gico completo seguindo EXATAMENTE as 6 etapas estruturadas:

üì• DADOS DE BRIEFING:
‚Ä¢ Tipo: ${tipoClinica}
‚Ä¢ Especialidade: ${especialidade}
‚Ä¢ Procedimentos: ${procedimentos}
‚Ä¢ Equipamentos: ${equipamentos}
‚Ä¢ Protocolo mais vendido: ${protocolo}
‚Ä¢ Ticket m√©dio: ${ticketMedio}
‚Ä¢ Modelo de venda: ${modeloVenda}
‚Ä¢ Faturamento atual: ${formatRevenue(data.currentRevenue)}
‚Ä¢ Meta 3 meses: ${formatGoal(data.revenueGoal)}
‚Ä¢ Objetivo de marketing: ${objetivo}
‚Ä¢ Frequ√™ncia de conte√∫do: ${frequencia}
‚Ä¢ Aparece nos v√≠deos? ${apareceVideos}
‚Ä¢ P√∫blico ideal: ${data.targetAudience || 'N√£o definido'}
‚Ä¢ Estilo da cl√≠nica: ${estiloClinica}
‚Ä¢ Estilo de linguagem desejado: ${formatCommunicationStyle(data.communicationStyle)}

---

üéØ RESPONDA COM AS 6 ETAPAS OBRIGAT√ìRIAS:

## üìä Diagn√≥stico Estrat√©gico da Cl√≠nica
[Identifique gargalos do neg√≥cio, desalinhamento entre p√∫blico/oferta/visual/autoridade. Use tom ${isClinicaMedica ? 't√©cnico e consultivo' : 'emocional e humanizado'}]

## üí° Sugest√µes de Conte√∫do Personalizado
[3-5 ideias pr√°ticas APENAS para Instagram/TikTok/Shorts. Inclua pelo menos 3 ideias usando ${equipamentos}. Seja criativo e humano]

## üìÖ Plano de A√ß√£o Semanal (4 semanas)
[
Semana 1: Autoridade e visibilidade (3-4 tarefas pr√°ticas)
Semana 2: Prova social e diferencial (3-4 tarefas pr√°ticas)  
Semana 3: Convers√£o e campanha (3-4 tarefas pr√°ticas)
Semana 4: Acelera√ß√£o e fideliza√ß√£o (3-4 tarefas pr√°ticas)
]

## üé® Avalia√ß√£o de Marca e Atendimento
[Avalie identidade visual, atendimento vs posicionamento, sugira melhorias e programa de indica√ß√£o]

## üß© Enigma do Mentor
[Frase misteriosa com trocadilho sobre mentor (sem revelar nome). Ex: "Esse plano foi guiado por algu√©m que transforma 'ladainha' em lucro..."]

## üìà Insights Estrat√©gicos Fluida
[3-5 insights pr√°ticos consultivos sobre equipamento, posicionamento, branding. Ex: "Voc√™ n√£o aparece nos v√≠deos ‚Äî isso pode estar limitando seu alcance"]

---

‚ö†Ô∏è CONTROLE DE ACESSO:
- Tipo detectado: ${tipoClinica}
- ${isClinicaMedica ? 'PODE sugerir equipamentos m√©dicos E est√©ticos' : 'APENAS equipamentos est√©ticos (N√ÉO m√©dicos)'}
- ${!isClinicaMedica ? 'NUNCA mencione: CO2, HIFU, Laser Fracionado, Intradermoterapia' : ''}

‚ö†Ô∏è REGRAS FINAIS:
- Proibido: live, blog, ebook, webinar
- Apenas conte√∫do de rede social
- Linguagem adaptada ao p√∫blico
- Diagn√≥stico consultivo e pr√°tico`;

  return prompt;
}

// Fun√ß√µes auxiliares de formata√ß√£o
function formatRevenue(revenue: string): string {
  const map: { [key: string]: string } = {
    'ate_15k': 'At√© R$ 15.000/m√™s',
    '15k_30k': 'R$ 15.000 - R$ 30.000/m√™s',
    '30k_60k': 'R$ 30.000 - R$ 60.000/m√™s',
    'acima_60k': 'Acima de R$ 60.000/m√™s'
  };
  return map[revenue] || revenue || 'N√£o informado';
}

function formatGoal(goal: string): string {
  const map: { [key: string]: string } = {
    'crescer_30': 'Crescer 30% em 3 meses',
    'crescer_50': 'Crescer 50% em 3 meses',
    'dobrar': 'Dobrar em 6 meses',
    'triplicar': 'Triplicar em 1 ano',
    'manter_estavel': 'Manter estabilidade'
  };
  return map[goal] || goal || 'N√£o informado';
}

function formatCommunicationStyle(style: string): string {
  const map: { [key: string]: string } = {
    'emocional_inspirador': 'Emocional e Inspirador',
    'tecnico_didatico': 'T√©cnico e Did√°tico',
    'humanizado_proximo': 'Humanizado e Pr√≥ximo',
    'direto_objetivo': 'Direto e Objetivo'
  };
  return map[style] || style || 'N√£o definido';
}

function formatMedicalObjective(objective: string): string {
  const map: { [key: string]: string } = {
    'autoridade_medica': 'Aumentar autoridade m√©dica',
    'escalar_consultorio': 'Escalar consult√≥rio',
    'fidelizar_pacientes': 'Melhorar reten√ß√£o de pacientes',
    'diferenciar_mercado': 'Diferenciar no mercado'
  };
  return map[objective] || objective || 'N√£o informado';
}

function formatAestheticObjective(objective: string): string {
  const map: { [key: string]: string } = {
    'atrair_leads': 'Atrair leads qualificados',
    'aumentar_recorrencia': 'Aumentar recorr√™ncia',
    'elevar_ticket': 'Aumentar ticket m√©dio',
    'autoridade_regiao': 'Ser refer√™ncia na regi√£o'
  };
  return map[objective] || objective || 'N√£o informado';
}

function formatMedicalTicket(ticket: string): string {
  const map: { [key: string]: string } = {
    'ate_500': 'At√© R$ 500',
    '500_1500': 'R$ 500 - R$ 1.500',
    '1500_3000': 'R$ 1.500 - R$ 3.000',
    '3000_5000': 'R$ 3.000 - R$ 5.000',
    'acima_5000': 'Acima de R$ 5.000'
  };
  return map[ticket] || ticket || 'N√£o informado';
}

function formatAestheticTicket(ticket: string): string {
  const map: { [key: string]: string } = {
    'ate_150': 'At√© R$ 150',
    '150_300': 'R$ 150 - R$ 300',
    '300_600': 'R$ 300 - R$ 600',
    '600_1000': 'R$ 600 - R$ 1.000',
    'acima_1000': 'Acima de R$ 1.000'
  };
  return map[ticket] || ticket || 'N√£o informado';
}

function detectaAparicaoVideos(data: any): string {
  const medical = data.medicalContentFrequency;
  const aesthetic = data.aestheticContentFrequency;
  
  if (medical && (medical.includes('aparece') || medical.includes('sempre'))) return 'Sim, aparece regularmente';
  if (aesthetic && (aesthetic.includes('aparece') || aesthetic.includes('sempre'))) return 'Sim, aparece regularmente';
  if (medical && medical.includes('nunca')) return 'N√£o aparece nos v√≠deos';
  if (aesthetic && aesthetic.includes('nunca')) return 'N√£o aparece nos v√≠deos';
  
  return 'N√£o especificado';
}
