
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üöÄ Edge function generate-marketing-diagnostic iniciada');
  console.log('üìù Method:', req.method);
  console.log('üîë OpenAI API Key configurada:', openAIApiKey ? 'SIM' : 'N√ÉO');
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Respondendo OPTIONS request');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üì• Recebendo dados do diagn√≥stico...');
    const diagnosticData = await req.json();
    console.log('üìä Dados recebidos:', JSON.stringify(diagnosticData, null, 2));

    if (!openAIApiKey) {
      console.error('‚ùå OPENAI_API_KEY n√£o configurada!');
      return new Response(JSON.stringify({ 
        error: 'OPENAI_API_KEY n√£o configurada',
        success: false,
        details: 'Configure a chave da OpenAI nas configura√ß√µes do projeto'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const prompt = createConsultorFluidaPrompt(diagnosticData);
    console.log('üìù Prompt criado, tamanho:', prompt.length);

    console.log('ü§ñ Chamando OpenAI API...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© o CONSULTOR FLUIDA ‚Äî um estrategista de marketing especializado em cl√≠nicas m√©dicas e est√©ticas, com foco total em atrair, encantar e fidelizar o p√∫blico final. Use linguagem emocional, acess√≠vel e inspira√ß√£o pr√°tica.' 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.85,
        max_tokens: 4000
      }),
    });

    console.log('üì° Resposta OpenAI status:', response.status);
    
    if (!response.ok) {
      console.error('‚ùå OpenAI API error:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('‚ùå OpenAI error body:', errorText);
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Resposta OpenAI recebida');
    console.log('üìä Usage:', data.usage);
    
    const diagnosticResult = data.choices[0].message.content;
    console.log('üìù Diagn√≥stico gerado, tamanho:', diagnosticResult?.length || 0);

    return new Response(JSON.stringify({ 
      diagnostic: diagnosticResult,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('üí• Error generating diagnostic:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro ao gerar diagn√≥stico com IA',
      success: false,
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function createConsultorFluidaPrompt(data: any): string {
  const tipoClinica = data.clinicType === 'clinica_medica' ? 'M√©dica' : 'Est√©tica';
  
  // Identificar equipamentos mencionados
  let equipamentos = '';
  if (data.clinicType === 'clinica_medica') {
    equipamentos = data.medicalEquipments || 'N√£o informado';
  } else {
    equipamentos = data.aestheticEquipments || 'N√£o informado';
  }
  
  // Identificar problemas/protocolos
  let problemasProtocolos = '';
  if (data.clinicType === 'clinica_medica') {
    problemasProtocolos = `${data.medicalProblems || ''} - Protocolo mais procurado: ${data.medicalMostSought || ''}`;
  } else {
    problemasProtocolos = `${data.aestheticProblems || ''} - Protocolo mais vendido: ${data.aestheticBestSeller || ''}`;
  }
  
  const publicoIdeal = data.targetAudience || 'N√£o definido claramente';
  const estilo = data.communicationStyle || 'N√£o definido';
  const faturamentoAtual = formatRevenue(data.currentRevenue);
  const meta = formatGoal(data.revenueGoal);
  
  // Dados espec√≠ficos do tipo de cl√≠nica
  let dadosEspecificos = '';
  if (data.clinicType === 'clinica_medica') {
    dadosEspecificos = `
- Especialidade: ${data.medicalSpecialty || 'N√£o informado'}
- Procedimentos: ${data.medicalProcedures || 'N√£o informado'}
- Ticket m√©dio: ${data.medicalTicket || 'N√£o informado'}
- Modelo de vendas: ${data.medicalSalesModel || 'N√£o informado'}
- Objetivo principal: ${data.medicalObjective || 'N√£o informado'}
- Aparece em v√≠deos: ${data.medicalVideoFrequency || 'N√£o informado'}
- Estilo da cl√≠nica: ${data.medicalClinicStyle || 'N√£o informado'}`;
  } else {
    dadosEspecificos = `
- Foco de atua√ß√£o: ${data.aestheticFocus || 'N√£o informado'}
- Ticket m√©dio: ${data.aestheticTicket || 'N√£o informado'}
- Modelo de vendas: ${data.aestheticSalesModel || 'N√£o informado'}
- Objetivo principal: ${data.aestheticObjective || 'N√£o informado'}
- Aparece em v√≠deos: ${data.aestheticVideoFrequency || 'N√£o informado'}
- Estilo da cl√≠nica: ${data.aestheticClinicStyle || 'N√£o informado'}`;
  }

  const prompt = `CONSULTOR FLUIDA ‚Äì Diagn√≥stico de Marketing com Segmenta√ß√£o Inteligente

Voc√™ √© o CONSULTOR FLUIDA ‚Äî um estrategista de marketing para cl√≠nicas est√©ticas e cl√≠nicas m√©dicas.

Com base no briefing abaixo, gere uma resposta completa dividida nas se√ß√µes:

1. üìä Diagn√≥stico Estrat√©gico da Cl√≠nica  
2. üí° Sugest√µes de Conte√∫do Humanizado (foco: TikTok, Instagram e YouTube Shorts)
3. üìÖ Plano de A√ß√£o de 3 Semanas  
4. üé® Avalia√ß√£o de Marca e Atendimento  
5. üß© Enigma Sat√≠rico do Mentor

---

üì• DADOS DO BRIEFING:
- **Tipo de cl√≠nica:** ${tipoClinica}
- **Equipamentos utilizados:** ${equipamentos}
- **Problemas/Protocolos:** ${problemasProtocolos}
- **P√∫blico ideal:** ${publicoIdeal}
- **Estilo de comunica√ß√£o:** ${estilo}
- **Faturamento atual:** ${faturamentoAtual}
- **Meta de faturamento:** ${meta}
- **Frequ√™ncia de postagem:** ${data.contentFrequency || 'N√£o informado'}

**Dados espec√≠ficos:**
${dadosEspecificos}

---

üì¶ REGRAS DE GERA√á√ÉO:

### 1. üìä Diagn√≥stico Estrat√©gico da Cl√≠nica
- Identifique os principais desafios e oportunidades baseado nos dados espec√≠ficos desta cl√≠nica ${tipoClinica}
- Analise o gap entre faturamento atual (${faturamentoAtual}) e meta (${meta})
- Use linguagem acess√≠vel, direta e emp√°tica
- Foque nos pontos que impedem o crescimento e nas oportunidades n√£o exploradas
- Se equipamentos foram mencionados, analise como est√£o sendo comunicados

### 2. üí° Sugest√µes de Conte√∫do Humanizado
Crie 5 ideias ESPEC√çFICAS para esta cl√≠nica ${tipoClinica} baseadas nos dados fornecidos:
- **Formatos priorit√°rios:** Reels, v√≠deos curtos ou carrossel com rosto
- **Conecte cada conte√∫do aos equipamentos:** ${equipamentos}
- **Inclua os problemas/protocolos mencionados:** ${problemasProtocolos}
- **Use o estilo de comunica√ß√£o:** ${estilo}
- **Foque no p√∫blico:** ${publicoIdeal}

**Exemplos de formato:**
- "Voc√™ sabia que [problema espec√≠fico mencionado] tem solu√ß√£o?" ‚Üí Reel com before/after
- "3 sinais de que voc√™ precisa de [tratamento espec√≠fico]" ‚Üí Carrossel educativo  
- "O que acontece durante [procedimento mencionado]" ‚Üí Reel de bastidores
- "Por que [equipamento espec√≠fico] √© diferente?" ‚Üí V√≠deo explicativo

**PROIBIDO:** blogs, lives longas, webinars ou estrat√©gias B2B
**OBRIGAT√ìRIO:** Conectar cada conte√∫do a um sentimento (autoestima, supera√ß√£o, dor comum)

### 3. üìÖ Plano de A√ß√£o de 3 Semanas
Baseado no perfil desta cl√≠nica ${tipoClinica}, crie a√ß√µes espec√≠ficas e pr√°ticas:

**SEMANA 1:** Estrutura√ß√£o de conte√∫do
- 3 a√ß√µes pr√°ticas espec√≠ficas para cl√≠nica ${tipoClinica}
- Foco em ${equipamentos}
- Objetivo: ${data.clinicType === 'clinica_medica' ? data.medicalObjective : data.aestheticObjective}

**SEMANA 2:** Engajamento e autoridade  
- 3 a√ß√µes para conectar com ${publicoIdeal}
- Estrat√©gias para estilo ${estilo}
- Frequ√™ncia atual: ${data.contentFrequency}

**SEMANA 3:** Convers√£o e crescimento
- 3 a√ß√µes para alcan√ßar meta de ${meta}
- Otimiza√ß√£o baseada no ticket m√©dio atual
- Foco no modelo de vendas mencionado

### 4. üé® Avalia√ß√£o de Marca e Atendimento
Analise especificamente para esta cl√≠nica ${tipoClinica}:

**Identidade Visual:**
- Nome e logotipo: transparecem autoridade para tratar os problemas mencionados?
- Cores e est√©tica: combinam com o estilo ${data.clinicType === 'clinica_medica' ? data.medicalClinicStyle : data.aestheticClinicStyle}?
- Presen√ßa digital: est√° alinhada com frequ√™ncia ${data.contentFrequency}?

**Experi√™ncia do Cliente:**
- Jornada de atendimento: desde o primeiro contato at√© p√≥s-${data.clinicType === 'clinica_medica' ? 'procedimento' : 'tratamento'}
- Programa de indica√ß√£o: como transformar clientes satisfeitos em embaixadores
- Recorr√™ncia: estrat√©gias para ${data.clinicType === 'clinica_medica' ? 'fidelizar pacientes' : 'manter clientes'}

### 5. üß© Enigma Sat√≠rico do Mentor
Crie uma frase enigm√°tica que brinque com caracter√≠sticas do mentor sem revel√°-lo:
- Use trocadilhos ou jogos de palavras
- Refer√™ncia sutil a estrat√©gias de marketing
- Tom bem-humorado e inteligente
- N√ÉO cite o nome do mentor

**Exemplo:** "Esse plano foi guiado por algu√©m que faz da estrat√©gia uma 'ladainha' irresist√≠vel..."

---

‚ö†Ô∏è REGRAS FINAIS:
- Linguagem pr√°tica, clara e emocional
- Foco 100% no cliente final da cl√≠nica
- Todo conte√∫do deve caber em Instagram, TikTok ou YouTube Shorts
- Se equipamentos espec√≠ficos foram mencionados, inclua sugest√µes baseadas neles
- Use os dados espec√≠ficos fornecidos para personalizar cada se√ß√£o
- Mantenha tom inspirador e execut√°vel`;

  return prompt;
}

function formatRevenue(revenue: string): string {
  const revenueMap: { [key: string]: string } = {
    'ate_15k': 'At√© R$ 15.000',
    '15k_30k': 'R$ 15.000 - R$ 30.000',
    '30k_60k': 'R$ 30.000 - R$ 60.000',
    'acima_60k': 'Acima de R$ 60.000'
  };
  return revenueMap[revenue] || revenue || 'N√£o informado';
}

function formatGoal(goal: string): string {
  const goalMap: { [key: string]: string } = {
    'crescer_30': 'Crescer 30%',
    'crescer_50': 'Crescer 50%',
    'dobrar': 'Dobrar o faturamento',
    'triplicar': 'Triplicar o faturamento',
    'manter_estavel': 'Manter estabilidade'
  };
  return goalMap[goal] || goal || 'N√£o informado';
}
