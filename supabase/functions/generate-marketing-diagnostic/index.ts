
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üöÄ Edge function generate-marketing-diagnostic iniciada');
  console.log('üìù Method:', req.method);
  console.log('üîë OpenAI API Key configurada:', openAIApiKey ? 'SIM' : 'N√ÉO');
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Respondendo OPTIONS request');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üì• Recebendo dados do diagn√≥stico...');
    const diagnosticData = await req.json();
    console.log('üìä Dados recebidos:', JSON.stringify(diagnosticData, null, 2));

    if (!openAIApiKey) {
      console.error('‚ùå OPENAI_API_KEY n√£o configurada!');
      return new Response(JSON.stringify({ 
        error: 'OPENAI_API_KEY n√£o configurada',
        success: false,
        details: 'Configure a chave da OpenAI nas configura√ß√µes do projeto'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Criar o prompt personalizado com os dados do diagn√≥stico
    const prompt = createEnhancedDiagnosticPrompt(diagnosticData);
    console.log('üìù Prompt criado, tamanho:', prompt.length);

    console.log('ü§ñ Chamando OpenAI API...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© o CONSULTOR FLUIDA ‚Äî um estrategista de marketing especializado em cl√≠nicas m√©dicas e cl√≠nicas est√©ticas. Sempre inclua s√°tiras criativas dos mentores e ideias super personalizadas baseadas no perfil espec√≠fico da cl√≠nica.' 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.8,
        max_tokens: 4000
      }),
    });

    console.log('üì° Resposta OpenAI status:', response.status);
    
    if (!response.ok) {
      console.error('‚ùå OpenAI API error:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('‚ùå OpenAI error body:', errorText);
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Resposta OpenAI recebida');
    console.log('üìä Usage:', data.usage);
    
    const diagnosticResult = data.choices[0].message.content;
    console.log('üìù Diagn√≥stico gerado, tamanho:', diagnosticResult?.length || 0);

    return new Response(JSON.stringify({ 
      diagnostic: diagnosticResult,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('üí• Error generating diagnostic:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro ao gerar diagn√≥stico com IA',
      success: false,
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function createEnhancedDiagnosticPrompt(data: any): string {
  // Mapear os dados para o formato do prompt
  const tipoClinica = data.clinicType === 'clinica_medica' ? 'M√©dica' : 'Est√©tica';
  const especialidade = data.medicalSpecialty || 'N√£o especificado';
  const procedimentos = data.medicalProcedures || data.aestheticFocus || 'N√£o especificado';
  const equipamentos = data.aestheticEquipments || 'N√£o especificado';
  const objetivo = data.medicalObjective || data.aestheticObjective || 'N√£o especificado';
  const faturamento = data.currentRevenue || 'N√£o informado';
  const meta = data.revenueGoal || 'N√£o informado';
  const frequencia = data.contentFrequency || 'N√£o informado';
  const aparece = data.personalBrand || 'N√£o informado';
  const publico = data.targetAudience || 'N√£o definido';
  const posicionamento = data.clinicPosition || 'N√£o definido';
  const trafegoReq = data.paidTraffic || 'N√£o informado';

  // Gerar contexto √∫nico para personaliza√ß√£o
  const contextoCriativo = generateCreativeContext(data);
  const mentorSugerido = inferBestMentor(data);

  const prompt = `Voc√™ √© o CONSULTOR FLUIDA ‚Äî um estrategista de marketing especializado em cl√≠nicas m√©dicas e cl√≠nicas est√©ticas.

IMPORTANTE: Gere ideias TOTALMENTE PERSONALIZADAS baseadas nos dados espec√≠ficos desta cl√≠nica. N√ÉO use sugest√µes gen√©ricas!

Com base no briefing abaixo, gere uma resposta completa dividida em se√ß√µes claras:

1. Diagn√≥stico Estrat√©gico da Cl√≠nica
2. Sugest√µes de Conte√∫do Inteligente (PERSONALIZADAS)
3. Plano de A√ß√£o de 3 Semanas
4. Mentor Estrat√©gico + Enigma Sat√≠rico

---

üì• Dados espec√≠ficos desta cl√≠nica:
- Tipo de cl√≠nica: ${tipoClinica}
- Especialidade (se m√©dica): ${especialidade}
- Procedimentos oferecidos: ${procedimentos}
- Equipamentos utilizados: ${equipamentos}
- Objetivo principal: ${objetivo}
- Faturamento atual: ${faturamento}
- Meta de crescimento: ${meta}
- Frequ√™ncia de conte√∫do: ${frequencia}
- Aparece no conte√∫do? ${aparece}
- P√∫blico ideal: ${publico}
- Posicionamento da cl√≠nica: ${posicionamento}
- Usa tr√°fego pago? ${trafegoReq}

üéØ Contexto √∫nico desta cl√≠nica: ${contextoCriativo}
üß† Mentor mais adequado: ${mentorSugerido}

---

üì¶ INSTRU√á√ïES ESPEC√çFICAS:

## üìä Diagn√≥stico Estrat√©gico
- Analise OS DADOS ESPEC√çFICOS desta cl√≠nica (n√£o seja gen√©rico)
- Identifique gargalos √∫nicos baseados no faturamento ${faturamento} e meta ${meta}
- Use tom consultivo e adapte ao perfil (${tipoClinica})

## üí° Sugest√µes de Conte√∫do SUPER PERSONALIZADAS
OBRIGAT√ìRIO: Gere 4-5 ideias √öNICAS baseadas em:
- Especialidade espec√≠fica: ${especialidade || procedimentos}
- Equipamentos da cl√≠nica: ${equipamentos}
- Objetivo: ${objetivo}
- Posicionamento: ${posicionamento}
- P√∫blico-alvo: ${publico}

Inclua:
- Pelo menos 1 ideia relacionada aos equipamentos espec√≠ficos
- Pelo menos 1 ideia para aumentar faturamento de ${faturamento} para ${meta}
- Ideias adaptadas ao fato de que ${aparece} aparece no conte√∫do
- Formatos espec√≠ficos para ${tipoClinica} (m√©dica = cient√≠fico, est√©tica = emocional)

## üìÖ Plano de A√ß√£o ‚Äì 3 Semanas ESPEC√çFICO
Baseado na frequ√™ncia atual (${frequencia}) e objetivo (${objetivo}):
- Semana 1: A√ß√µes para ${posicionamento} + ${especialidade || procedimentos}
- Semana 2: Estrat√©gias para p√∫blico ${publico} + equipamentos ${equipamentos}
- Semana 3: Convers√£o espec√≠fica para meta ${meta}

## üß© Mentor Estrat√©gico + Enigma Sat√≠rico
**Mentor escolhido:** ${mentorSugerido}
**Por que foi escolhido:** Baseado no perfil ${tipoClinica} + objetivo ${objetivo} + posicionamento ${posicionamento}

**Enigma Sat√≠rico OBRIGAT√ìRIO:**
Crie uma frase misteriosa com trocadilho/s√°tira usando o SOBRENOME do mentor (SEM citar o nome completo), relacionada aos desafios espec√≠ficos desta cl√≠nica:

Exemplos do que fazer:
- "Quem tem vis√£o para enxergar al√©m, sempre encontra uma 'CARVALHO' s√≥lida para crescer..."
- "Estrat√©gia que funciona vem de quem sabe fazer uma 'LADEIRA' virar subida de sucesso..."
- "Criatividade que converte vem de quem tem 'PORTO' seguro para navegar no digital..."

---

‚ö†Ô∏è REGRAS CR√çTICAS:
- NUNCA cite o nome completo do mentor, apenas fa√ßa trocadilho com o sobrenome
- Gere ideias ESPEC√çFICAS desta cl√≠nica, n√£o gen√©ricas
- Use os dados reais fornecidos para personalizar tudo
- Organize com t√≠tulos claros e tom humano/profissional
- Foque em a√ß√µes que realmente aumentem o faturamento de ${faturamento} para ${meta}`;

  return prompt;
}

function generateCreativeContext(data: any): string {
  const contexts = [];
  
  if (data.clinicType === 'clinica_medica') {
    if (data.medicalSpecialty === 'dermatologia') {
      contexts.push('Cl√≠nica com potencial para autoridade em pele e rejuvenescimento');
    } else if (data.medicalSpecialty === 'nutrologia') {
      contexts.push('Nicho premium com foco em longevidade e qualidade de vida');
    } else if (data.medicalSpecialty === 'cirurgia_plastica') {
      contexts.push('Alto valor agregado, p√∫blico exigente, resultados definitivos');
    }
  } else {
    if (data.aestheticFocus === 'corporal') {
      contexts.push('Mercado sazonal com picos no ver√£o, foco em transforma√ß√£o');
    } else if (data.aestheticFocus === 'facial') {
      contexts.push('Demanda constante, relacionamento duradouro, autoestima');
    } else if (data.aestheticFocus === 'depilacao') {
      contexts.push('Base recorrente s√≥lida, fideliza√ß√£o natural');
    }
  }
  
  if (data.currentRevenue === 'ate_15k') {
    contexts.push('Fase de estrutura√ß√£o, precisa profissionalizar marketing');
  } else if (data.currentRevenue === 'acima_60k') {
    contexts.push('Alto faturamento, foco em efici√™ncia e lideran√ßa');
  }
  
  if (data.personalBrand === 'nunca') {
    contexts.push('Oportunidade inexplorada de marca pessoal');
  } else if (data.personalBrand === 'sim_sempre') {
    contexts.push('Marca pessoal ativa, otimizar alcance');
  }
  
  return contexts.join('. ') || 'Cl√≠nica com potencial de crescimento √∫nico';
}

function inferBestMentor(data: any): string {
  // L√≥gica para inferir o mentor mais adequado
  if (data.clinicType === 'clinica_medica') {
    if (data.medicalObjective === 'autoridade') {
      return '√çcaro de Carvalho (Storytelling e Autoridade)';
    } else if (data.medicalObjective === 'escala') {
      return 'Pedro Sobral (Performance e Estrutura√ß√£o)';
    } else {
      return 'Washington Olivetto (Big Ideas M√©dicas)';
    }
  } else {
    if (data.aestheticObjective === 'mais_leads') {
      return 'Leandro Ladeira (Convers√£o e Tr√°fego)';
    } else if (data.aestheticObjective === 'autoridade') {
      return '√çcaro de Carvalho (Storytelling e Posicionamento)';
    } else if (data.clinicPosition === 'premium') {
      return 'Washington Olivetto (Branding Premium)';
    } else {
      return 'Paulo Cuenca (Criatividade Visual)';
    }
  }
  
  // Fallbacks baseados em outros crit√©rios
  if (data.personalBrand === 'nunca' || data.contentFrequency === 'irregular') {
    return 'Camila Porto (Marketing B√°sico Estruturado)';
  }
  
  if (data.paidTraffic === 'nunca_usei') {
    return 'Leandro Ladeira (Convers√£o e Tr√°fego Pago)';
  }
  
  return 'Hyeser Souza (Engajamento e Viraliza√ß√£o)';
}
