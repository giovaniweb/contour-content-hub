
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üöÄ Edge function generate-marketing-diagnostic iniciada');
  console.log('üìù Method:', req.method);
  console.log('üîë OpenAI API Key configurada:', openAIApiKey ? 'SIM' : 'N√ÉO');
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Respondendo OPTIONS request');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üì• Recebendo dados do diagn√≥stico...');
    const diagnosticData = await req.json();
    console.log('üìä Dados recebidos:', JSON.stringify(diagnosticData, null, 2));

    if (!openAIApiKey) {
      console.error('‚ùå OPENAI_API_KEY n√£o configurada!');
      return new Response(JSON.stringify({ 
        error: 'OPENAI_API_KEY n√£o configurada',
        success: false,
        details: 'Configure a chave da OpenAI nas configura√ß√µes do projeto'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Criar o prompt personalizado com os dados do diagn√≥stico
    const prompt = createUltraPersonalizedPrompt(diagnosticData);
    console.log('üìù Prompt criado, tamanho:', prompt.length);

    console.log('ü§ñ Chamando OpenAI API...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© o CONSULTOR FLUIDA ‚Äî um estrategista de marketing especializado em cl√≠nicas m√©dicas e cl√≠nicas est√©ticas. SEMPRE inclua as 4 se√ß√µes obrigat√≥rias: Diagn√≥stico, Ideias de Conte√∫do, Plano de A√ß√£o e OBRIGATORIAMENTE a S√°tira do Mentor no final.' 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.85,
        max_tokens: 4000
      }),
    });

    console.log('üì° Resposta OpenAI status:', response.status);
    
    if (!response.ok) {
      console.error('‚ùå OpenAI API error:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('‚ùå OpenAI error body:', errorText);
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Resposta OpenAI recebida');
    console.log('üìä Usage:', data.usage);
    
    const diagnosticResult = data.choices[0].message.content;
    console.log('üìù Diagn√≥stico gerado, tamanho:', diagnosticResult?.length || 0);

    return new Response(JSON.stringify({ 
      diagnostic: diagnosticResult,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('üí• Error generating diagnostic:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro ao gerar diagn√≥stico com IA',
      success: false,
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function createUltraPersonalizedPrompt(data: any): string {
  // Mapear os dados para o formato do prompt
  const tipoClinica = data.clinicType === 'clinica_medica' ? 'M√©dica' : 'Est√©tica';
  const especialidade = data.medicalSpecialty || 'N√£o especificado';
  const procedimentos = data.medicalProcedures || data.aestheticFocus || 'N√£o especificado';
  const equipamentos = data.aestheticEquipments || 'N√£o especificado';
  const objetivo = data.medicalObjective || data.aestheticObjective || 'N√£o especificado';
  const faturamento = data.currentRevenue || 'N√£o informado';
  const meta = data.revenueGoal || 'N√£o informado';
  const frequencia = data.contentFrequency || 'N√£o informado';
  const aparece = data.personalBrand || 'N√£o informado';
  const publico = data.targetAudience || 'N√£o definido';
  const posicionamento = data.clinicPosition || 'N√£o definido';
  const trafegoReq = data.paidTraffic || 'N√£o informado';

  // Gerar contexto √∫nico para personaliza√ß√£o
  const contextoCriativo = generateCreativeContext(data);
  const mentorSugerido = inferBestMentor(data);

  const prompt = `üéØ CONSULTOR FLUIDA ‚Äî DIAGN√ìSTICO PERSONALIZADO

DADOS EXCLUSIVOS DESTA CL√çNICA:
- Tipo: ${tipoClinica}
- Especialidade: ${especialidade}
- Procedimentos: ${procedimentos}
- Equipamentos: ${equipamentos}
- Objetivo: ${objetivo}
- Faturamento atual: ${faturamento}
- Meta: ${meta}
- Frequ√™ncia de conte√∫do: ${frequencia}
- Aparece em v√≠deos: ${aparece}
- P√∫blico: ${publico}
- Posicionamento: ${posicionamento}
- Tr√°fego pago: ${trafegoReq}

CONTEXTO √öNICO: ${contextoCriativo}
MENTOR IDENTIFICADO: ${mentorSugerido}

---

GERE UM DIAGN√ìSTICO COMPLETO COM EXATAMENTE 4 SE√á√ïES:

## üìä DIAGN√ìSTICO ESTRAT√âGICO DA CL√çNICA
Analise OS DADOS ESPEC√çFICOS desta cl√≠nica ${tipoClinica}. Identifique:
- Gargalos √∫nicos baseado no faturamento ${faturamento} vs meta ${meta}
- Oportunidades espec√≠ficas para ${especialidade || procedimentos}
- An√°lise do posicionamento ${posicionamento} no mercado
- Status da presen√ßa digital atual (${aparece} aparece, frequ√™ncia ${frequencia})

## üí° IDEIAS DE CONTE√öDO SUPER PERSONALIZADAS
OBRIGAT√ìRIO: Gere 4-5 ideias EXCLUSIVAS para esta cl√≠nica:

1. UMA ideia relacionada aos equipamentos: ${equipamentos}
2. UMA ideia para aumentar faturamento de ${faturamento} para ${meta}
3. UMA ideia espec√≠fica para o p√∫blico ${publico}
4. UMA ideia baseada no posicionamento ${posicionamento}
5. UMA ideia para melhorar ${objetivo}

Cada ideia deve incluir:
- Formato espec√≠fico (Reel, Carrossel, Story, Live)
- T√≠tulo exato do conte√∫do
- Como executar na pr√°tica
- Por que vai funcionar para este perfil

## üìÖ PLANO DE A√á√ÉO - 3 SEMANAS ESPEC√çFICO
Baseado na frequ√™ncia ${frequencia} e objetivo ${objetivo}:

**SEMANA 1:** A√ß√µes para ${posicionamento} + ${especialidade || procedimentos}
- 3 a√ß√µes pr√°ticas espec√≠ficas

**SEMANA 2:** Estrat√©gias para p√∫blico ${publico} + equipamentos ${equipamentos}
- 3 a√ß√µes pr√°ticas espec√≠ficas

**SEMANA 3:** Convers√£o para meta ${meta} + otimiza√ß√£o
- 3 a√ß√µes pr√°ticas espec√≠ficas

## üß© S√ÅTIRA DO MENTOR - OBRIGAT√ìRIO
**Mentor escolhido:** ${mentorSugerido}
**Por que:** Baseado no perfil ${tipoClinica} + objetivo ${objetivo}

**ENIGMA SAT√çRICO:**
Crie uma frase misteriosa com trocadilho usando APENAS O SOBRENOME do mentor (sem citar nome completo), relacionada aos desafios espec√≠ficos desta cl√≠nica.

Exemplos do formato:
- "Quem tem vis√£o estrat√©gica sempre encontra uma 'CARVALHO' s√≥lida para crescer..."
- "Marketing que converte vem de quem sabe navegar no 'PORTO' digital..."
- "Criatividade que funciona vem de quem domina a 'LADEIRA' do sucesso..."

‚ö†Ô∏è REGRAS CR√çTICAS:
- NUNCA cite o nome completo do mentor
- Use APENAS o sobrenome em trocadilho
- Gere ideias ESPEC√çFICAS desta cl√≠nica, n√£o gen√©ricas
- TODAS as 4 se√ß√µes s√£o obrigat√≥rias
- Foque em a√ß√µes que realmente aumentem o faturamento`;

  return prompt;
}

function generateCreativeContext(data: any): string {
  const contexts = [];
  
  if (data.clinicType === 'clinica_medica') {
    if (data.medicalSpecialty === 'dermatologia') {
      contexts.push('Cl√≠nica dermatol√≥gica com potencial para autoridade em rejuvenescimento e sa√∫de da pele');
    } else if (data.medicalSpecialty === 'nutrologia') {
      contexts.push('Nicho premium em nutrologia com foco em longevidade e qualidade de vida');
    } else if (data.medicalSpecialty === 'cirurgia_plastica') {
      contexts.push('Cirurgia pl√°stica de alto valor agregado, p√∫blico exigente, resultados definitivos');
    } else if (data.medicalSpecialty === 'ginecoestetica') {
      contexts.push('Ginecoest√©tica especializada, mercado espec√≠fico com alta demanda');
    } else {
      contexts.push('Cl√≠nica m√©dica especializada com potencial de diferencia√ß√£o t√©cnica');
    }
  } else {
    if (data.aestheticFocus === 'corporal') {
      contexts.push('Est√©tica corporal com mercado sazonal, picos no ver√£o, foco em transforma√ß√£o');
    } else if (data.aestheticFocus === 'facial') {
      contexts.push('Est√©tica facial com demanda constante, relacionamento duradouro, autoestima');
    } else if (data.aestheticFocus === 'depilacao') {
      contexts.push('Depila√ß√£o com base recorrente s√≥lida, fideliza√ß√£o natural');
    } else {
      contexts.push('Est√©tica completa com m√∫ltiplas oportunidades de cross-selling');
    }
  }
  
  if (data.currentRevenue === 'ate_15k') {
    contexts.push('Fase inicial de crescimento, precisa estruturar marketing e processos');
  } else if (data.currentRevenue === '15k_30k') {
    contexts.push('Crescimento consistente, momento de profissionalizar e escalar');
  } else if (data.currentRevenue === '30k_60k') {
    contexts.push('Faturamento s√≥lido, foco em efici√™ncia e diferencia√ß√£o');
  } else if (data.currentRevenue === 'acima_60k') {
    contexts.push('Alto faturamento, oportunidade de lideran√ßa e expans√£o');
  }
  
  if (data.personalBrand === 'nunca') {
    contexts.push('Grande oportunidade inexplorada de marca pessoal para autoridade');
  } else if (data.personalBrand === 'sim_sempre') {
    contexts.push('Marca pessoal ativa, otimizar alcance e convers√£o');
  }

  if (data.paidTraffic === 'nunca_usei') {
    contexts.push('Oportunidade de crescimento acelerado com tr√°fego pago estruturado');
  } else if (data.paidTraffic === 'sim_regular') {
    contexts.push('Tr√°fego pago ativo, focar em otimiza√ß√£o de ROI e escalabilidade');
  }
  
  return contexts.join('. ') || 'Cl√≠nica com perfil √∫nico e potencial de crescimento diferenciado';
}

function inferBestMentor(data: any): string {
  // L√≥gica mais robusta para inferir o mentor
  if (data.clinicType === 'clinica_medica') {
    if (data.medicalObjective === 'autoridade') {
      return '√çcaro de Carvalho (Storytelling e Autoridade M√©dica)';
    } else if (data.medicalObjective === 'escala') {
      return 'Pedro Sobral (Performance e Estrutura√ß√£o M√©dica)';
    } else if (data.medicalObjective === 'diferenciacao') {
      return 'Washington Olivetto (Big Ideas M√©dicas)';
    } else {
      return 'Dr. √çcaro de Carvalho (Comunica√ß√£o M√©dica)';
    }
  } else {
    if (data.aestheticObjective === 'mais_leads') {
      return 'Leandro Ladeira (Convers√£o e Tr√°fego)';
    } else if (data.aestheticObjective === 'autoridade') {
      return '√çcaro de Carvalho (Storytelling e Posicionamento)';
    } else if (data.aestheticObjective === 'ticket_medio') {
      return 'Paulo Cuenca (Criatividade e Valor)';
    } else if (data.clinicPosition === 'premium') {
      return 'Washington Olivetto (Branding Premium)';
    } else {
      return 'Camila Porto (Marketing Est√©tico Estruturado)';
    }
  }
}
