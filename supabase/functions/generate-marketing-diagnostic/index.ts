import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üéØ CONSULTOR FLUIDA - Diagn√≥stico iniciado');
  console.log('üìù Method:', req.method);
  console.log('üîë OpenAI Key present:', !!openAIApiKey);
  
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const diagnosticData = await req.json();
    console.log('üìä Dados do diagn√≥stico recebidos:', JSON.stringify(diagnosticData, null, 2));

    // Valida√ß√£o da chave OpenAI
    if (!openAIApiKey) {
      console.error('‚ùå OPENAI_API_KEY n√£o configurada!');
      return new Response(JSON.stringify({ 
        error: 'OPENAI_API_KEY n√£o configurada - Configure a chave da OpenAI nas configura√ß√µes do projeto',
        success: false,
        details: 'A chave da OpenAI precisa ser configurada nos secrets do Supabase'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    if (!openAIApiKey.startsWith('sk-')) {
      console.error('‚ùå OPENAI_API_KEY inv√°lida - deve come√ßar com sk-');
      return new Response(JSON.stringify({ 
        error: 'Chave OpenAI inv√°lida - deve come√ßar com sk-',
        success: false,
        details: 'Verifique se a chave da OpenAI foi configurada corretamente'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Criar prompt seguindo as especifica√ß√µes completas
    const prompt = createConsultorFluidaPrompt(diagnosticData);
    console.log('üìù Prompt criado, tamanho:', prompt.length);

    console.log('üåê Testando conex√£o com OpenAI...');
    
    // Teste da chave OpenAI
    const testResponse = await fetch('https://api.openai.com/v1/models', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
    });

    console.log('üîç Teste de conex√£o OpenAI status:', testResponse.status);
    
    if (!testResponse.ok) {
      const testError = await testResponse.text();
      console.error('‚ùå Falha no teste da chave OpenAI:', testError);
      return new Response(JSON.stringify({ 
        error: 'Chave OpenAI inv√°lida ou sem permiss√£o',
        success: false,
        details: `Status: ${testResponse.status} - ${testError}`
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('‚úÖ Chave OpenAI v√°lida, gerando diagn√≥stico...');
    
    // Chamada para OpenAI com timeout de 60 segundos
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 60000);
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      signal: controller.signal,
      body: JSON.stringify({
        model: 'gpt-4.1-2025-04-14', // Modelo mais recente e potente
        messages: [
          { 
            role: 'system', 
            content: getSystemPrompt()
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 4000 // Aumentado para diagn√≥sticos mais completos
      }),
    });

    clearTimeout(timeoutId);
    console.log('üì° Status da resposta OpenAI:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå OpenAI API error:', response.status, errorText);
      
      return new Response(JSON.stringify({ 
        error: `Erro na OpenAI: ${response.status}`,
        success: false,
        details: errorText
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const data = await response.json();
    console.log('üìÑ Resposta OpenAI recebida');
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('‚ùå Estrutura de resposta inv√°lida da OpenAI');
      return new Response(JSON.stringify({ 
        error: 'Resposta inv√°lida da OpenAI',
        success: false 
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const diagnosticResult = data.choices[0].message.content;
    console.log('‚úÖ Diagn√≥stico gerado com sucesso, tamanho:', diagnosticResult?.length || 0);

    return new Response(JSON.stringify({ 
      diagnostic: diagnosticResult,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
    
  } catch (error) {
    console.error('üí• Erro geral:', error);
    
    if (error.name === 'AbortError') {
      return new Response(JSON.stringify({ 
        error: 'Timeout - IA demorou mais que 60 segundos para responder',
        success: false,
        details: 'Tente novamente em alguns minutos'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }
    
    return new Response(JSON.stringify({ 
      error: 'Erro interno do servidor',
      success: false,
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function getSystemPrompt(): string {
  return `Voc√™ √© o CONSULTOR FLUIDA ‚Äî estrategista oficial da plataforma para cl√≠nicas est√©ticas e m√©dicas.

Sua miss√£o √© gerar um diagn√≥stico completo com base nas respostas fornecidas, adaptando a linguagem e recomenda√ß√µes ao tipo de cl√≠nica (m√©dica ou est√©tica).

üì¶ ESTRUTURA OBRIGAT√ìRIA DO RESULTADO:

## üìä Diagn√≥stico Estrat√©gico da Cl√≠nica
[Identifique gargalos, analise desalinhamento entre p√∫blico/oferta/visual/autoridade, use tom consultivo adaptado]

## üí° Sugest√µes de Conte√∫do Personalizado
[3-5 ideias pr√°ticas SOMENTE para Instagram, Reels, TikTok, Shorts - incluir pelo menos 3 ideias com equipamentos citados]

## üìÖ Plano de A√ß√£o Semanal
Semana 1: Autoridade e visibilidade
Semana 2: Prova social e diferencial  
Semana 3: Convers√£o e campanha
Semana 4: Acelera√ß√£o e fideliza√ß√£o
[3-4 tarefas pr√°ticas por semana]

## üé® Avalia√ß√£o de Marca e Atendimento
[Avalie identidade visual, atendimento vs posicionamento, sugira melhorias e programa de indica√ß√£o]

## üß© Enigma do Mentor
[Frase misteriosa com trocadilho - NUNCA revele o nome verdadeiro do mentor]

## üìà Insights Estrat√©gicos Fluida
[3-5 insights pr√°ticos com tom de consultoria]

‚ö†Ô∏è RESTRI√á√ïES:
- Proibido citar live, blog, ebook ou webinar
- Tudo deve caber em conte√∫do de rede social
- Use linguagem adaptada: m√©dica = t√©cnico-consultivo, est√©tica = emocional-inspirador
- N√£o alucine equipamentos ou formatos n√£o citados
- Foque no que foi fornecido nos dados de briefing

üéØ SEGMENTA√á√ÉO:
- Cl√≠nica M√©dica ‚Üí Pode ver todos os equipamentos
- Cl√≠nica Est√©tica ‚Üí Apenas equipamentos n√£o invasivos
- Infer√™ncia: Unyque PRO/Reverso/Enygma = M√âDICA | Crystal 3D Plus/Crio/Multishape = EST√âTICA

‚ö†Ô∏è VALIDA√á√ÉO DE EQUIPAMENTOS:
Todo equipamento citado deve ser validado com base no banco oficial. Se n√£o reconhecido, gere alerta:
"Equipamento n√£o validado no banco de dados oficial. Verifique a ortografia ou consulte o time t√©cnico Fluida."

Se m√∫ltiplos equipamentos, gere pelo menos 1 sugest√£o de conte√∫do e 1 insight para cada um.`;
}

function createConsultorFluidaPrompt(data: any): string {
  const tipoClinica = data.clinicType === 'clinica_medica' ? 'M√©dica' : 'Est√©tica';
  const isClinicaMedica = data.clinicType === 'clinica_medica';
  
  // Detectar dados principais com base no tipo de cl√≠nica
  const especialidade = isClinicaMedica 
    ? (data.medicalSpecialty || 'N√£o informado')
    : (data.aestheticFocus || 'N√£o informado');

  const procedimentos = isClinicaMedica
    ? (data.medicalProcedures || 'N√£o informado')
    : (data.aestheticTreatments || 'N√£o informado');

  const equipamentos = isClinicaMedica
    ? (data.medicalEquipments || 'N√£o informado')
    : (data.aestheticEquipments || 'N√£o informado');

  const protocolo = isClinicaMedica
    ? (data.medicalBestSeller || 'N√£o informado')
    : (data.aestheticBestSeller || 'N√£o informado');

  const ticketMedio = isClinicaMedica
    ? formatMedicalTicket(data.medicalTicket)
    : formatAestheticTicket(data.aestheticTicket);

  const objetivo = isClinicaMedica
    ? formatMedicalObjective(data.medicalObjective)
    : formatAestheticObjective(data.aestheticObjective);

  const frequencia = data.contentFrequency || 'N√£o informado';
  const faturamento = formatRevenue(data.currentRevenue);
  const meta = formatGoal(data.revenueGoal);
  const publicoIdeal = data.targetAudience || 'N√£o definido';
  const estiloClinica = data.clinicStyle || 'N√£o definido';
  const desafios = data.mainChallenges || 'N√£o informado';
  const estiloLinguagem = data.communicationStyle || (isClinicaMedica ? 't√©cnico-consultivo' : 'emocional e inspirador');

  // Detectar se aparece nos v√≠deos
  const apareceVideos = data.showsInVideos ? 'Sim' : 'N√£o definido';

  // Problemas que os equipamentos resolvem
  const problemasEquipamentos = data.equipmentProblems || 'N√£o informado';

  // Modelo de venda
  const modeloVenda = data.salesModel || 'N√£o informado';

  const prompt = `üéØ CONSULTOR FLUIDA - DIAGN√ìSTICO PERSONALIZADO

üìã DADOS DE BRIEFING:

‚Ä¢ Tipo: ${tipoClinica}
‚Ä¢ Especialidade: ${especialidade}
‚Ä¢ Procedimentos: ${procedimentos}
‚Ä¢ Equipamentos: ${equipamentos}
‚Ä¢ Problemas que os equipamentos resolvem: ${problemasEquipamentos}
‚Ä¢ Protocolo mais vendido: ${protocolo}
‚Ä¢ Ticket m√©dio: ${ticketMedio}
‚Ä¢ Modelo de venda: ${modeloVenda}
‚Ä¢ Faturamento atual: ${faturamento}
‚Ä¢ Meta 3 meses: ${meta}
‚Ä¢ Objetivo de marketing: ${objetivo}
‚Ä¢ Frequ√™ncia de conte√∫do: ${frequencia}
‚Ä¢ Aparece nos v√≠deos: ${apareceVideos}
‚Ä¢ P√∫blico ideal: ${publicoIdeal}
‚Ä¢ Estilo da cl√≠nica: ${estiloClinica}
‚Ä¢ Estilo de linguagem desejado: ${estiloLinguagem}
‚Ä¢ Principais desafios: ${desafios}

---

üéØ GERE UM DIAGN√ìSTICO COMPLETO SEGUINDO A ESTRUTURA OBRIGAT√ìRIA:

Use a linguagem adequada:
- ${isClinicaMedica ? 'T√âCNICO-CONSULTIVA (cl√≠nica m√©dica)' : 'EMOCIONAL-INSPIRADORA (cl√≠nica est√©tica)'}

Foque nos equipamentos mencionados: ${equipamentos}

Personalize tudo com base no perfil fornecido acima.

‚ö†Ô∏è IMPORTANTE: Siga EXATAMENTE a estrutura das 6 se√ß√µes obrigat√≥rias com os t√≠tulos e emojis especificados.

Se houver m√∫ltiplos equipamentos, gere pelo menos 1 sugest√£o de conte√∫do e 1 insight para cada um.

O plano deve ser din√¢mico e alinhado com as recomenda√ß√µes, personalizando linguagem e abordagem.

Para o Enigma do Mentor, crie uma frase misteriosa com trocadilho, mas NUNCA revele o nome verdadeiro do mentor.`;

  return prompt;
}

// Fun√ß√µes auxiliares de formata√ß√£o
function formatRevenue(revenue: string): string {
  const map: { [key: string]: string } = {
    'ate_15k': 'At√© R$ 15.000/m√™s',
    '15k_30k': 'R$ 15.000 - R$ 30.000/m√™s',
    '30k_60k': 'R$ 30.000 - R$ 60.000/m√™s',
    'acima_60k': 'Acima de R$ 60.000/m√™s'
  };
  return map[revenue] || revenue || 'N√£o informado';
}

function formatGoal(goal: string): string {
  const map: { [key: string]: string } = {
    'crescer_30': 'Crescer 30% em 3 meses',
    'crescer_50': 'Crescer 50% em 3 meses',
    'dobrar': 'Dobrar em 6 meses',
    'triplicar': 'Triplicar em 1 ano',
    'manter_estavel': 'Manter estabilidade'
  };
  return map[goal] || goal || 'N√£o informado';
}

function formatMedicalObjective(objective: string): string {
  const map: { [key: string]: string } = {
    'autoridade_medica': 'Aumentar autoridade m√©dica',
    'escalar_consultorio': 'Escalar consult√≥rio',
    'fidelizar_pacientes': 'Melhorar reten√ß√£o de pacientes',
    'diferenciar_mercado': 'Diferenciar no mercado'
  };
  return map[objective] || objective || 'N√£o informado';
}

function formatAestheticObjective(objective: string): string {
  const map: { [key: string]: string } = {
    'atrair_leads': 'Atrair leads qualificados',
    'aumentar_recorrencia': 'Aumentar recorr√™ncia',
    'elevar_ticket': 'Aumentar ticket m√©dio',
    'autoridade_regiao': 'Ser refer√™ncia na regi√£o'
  };
  return map[objective] || objective || 'N√£o informado';
}

function formatMedicalTicket(ticket: string): string {
  const map: { [key: string]: string } = {
    'ate_500': 'At√© R$ 500',
    '500_1500': 'R$ 500 - R$ 1.500',
    '1500_3000': 'R$ 1.500 - R$ 3.000',
    '3000_5000': 'R$ 3.000 - R$ 5.000',
    'acima_5000': 'Acima de R$ 5.000'
  };
  return map[ticket] || ticket || 'N√£o informado';
}

function formatAestheticTicket(ticket: string): string {
  const map: { [key: string]: string } = {
    'ate_150': 'At√© R$ 150',
    '150_300': 'R$ 150 - R$ 300',
    '300_600': 'R$ 300 - R$ 600',
    '600_1000': 'R$ 600 - R$ 1.000',
    'acima_1000': 'Acima de R$ 1.000'
  };
  return map[ticket] || ticket || 'N√£o informado';
}
