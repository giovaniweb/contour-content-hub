
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üöÄ Edge function generate-marketing-diagnostic iniciada');
  console.log('üìù Method:', req.method);
  console.log('üîë OpenAI API Key configurada:', openAIApiKey ? 'SIM' : 'N√ÉO');
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Respondendo OPTIONS request');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üì• Recebendo dados do diagn√≥stico...');
    const diagnosticData = await req.json();
    console.log('üìä Dados recebidos:', JSON.stringify(diagnosticData, null, 2));

    if (!openAIApiKey) {
      console.error('‚ùå OPENAI_API_KEY n√£o configurada!');
      return new Response(JSON.stringify({ 
        error: 'OPENAI_API_KEY n√£o configurada',
        success: false,
        details: 'Configure a chave da OpenAI nas configura√ß√µes do projeto'
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Criar o prompt personalizado com os dados do diagn√≥stico
    const prompt = createHumanizedPrompt(diagnosticData);
    console.log('üìù Prompt criado, tamanho:', prompt.length);

    console.log('ü§ñ Chamando OpenAI API...');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© o CONSULTOR FLUIDA ‚Äî um estrategista de marketing especializado em cl√≠nicas m√©dicas e est√©ticas, com foco total em atrair, encantar e fidelizar o p√∫blico final. Use linguagem emocional, acess√≠vel e inspira√ß√£o pr√°tica.' 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.85,
        max_tokens: 4000
      }),
    });

    console.log('üì° Resposta OpenAI status:', response.status);
    
    if (!response.ok) {
      console.error('‚ùå OpenAI API error:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('‚ùå OpenAI error body:', errorText);
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('‚úÖ Resposta OpenAI recebida');
    console.log('üìä Usage:', data.usage);
    
    const diagnosticResult = data.choices[0].message.content;
    console.log('üìù Diagn√≥stico gerado, tamanho:', diagnosticResult?.length || 0);

    return new Response(JSON.stringify({ 
      diagnostic: diagnosticResult,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('üí• Error generating diagnostic:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro ao gerar diagn√≥stico com IA',
      success: false,
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function createHumanizedPrompt(data: any): string {
  // Mapear os dados para o formato do prompt humanizado
  const tipoClinica = data.clinicType === 'clinica_medica' ? 'Cl√≠nica M√©dica' : 'Cl√≠nica Est√©tica';
  const especialidade = data.medicalSpecialty || data.aestheticFocus || 'N√£o especificado';
  const equipamentos = formatEquipments(data);
  const problemas = extractProblems(data);
  const publico = data.targetAudience || 'N√£o definido claramente';
  const estilo = data.personalBrand === 'sim_sempre' ? 'Comunica√ß√£o com rosto, pr√≥xima e humanizada' : 
                data.personalBrand === 'sim_pouco' ? 'Comunica√ß√£o mista, com e sem rosto' : 
                'Comunica√ß√£o institucional, sem aparecer';
  const faturamentoAtual = formatRevenue(data.currentRevenue);
  const meta = formatGoal(data.revenueGoal);
  
  // Gerar contexto √∫nico e mentor sugerido
  const mentorSugerido = inferBestMentor(data);

  const prompt = `Voc√™ √© o CONSULTOR FLUIDA ‚Äî um estrategista de marketing especializado em cl√≠nicas m√©dicas e est√©ticas, com foco total em atrair, encantar e fidelizar o p√∫blico final.

Com base no briefing abaixo, gere uma resposta dividida nas se√ß√µes:

1. Diagn√≥stico Estrat√©gico da Cl√≠nica  
2. Ideias de Conte√∫do Humanizado  
3. Plano de A√ß√£o de 3 Semanas  
4. Avalia√ß√£o de Marca e Atendimento  
5. Enigma Sat√≠rico do Mentor

---

üì• Dados do briefing:
- Tipo de cl√≠nica: ${tipoClinica}
- Especialidade: ${especialidade}
- Equipamentos: ${equipamentos}
- Problemas que resolve: ${problemas}
- P√∫blico ideal: ${publico}
- Estilo de linguagem desejado: ${estilo}
- Faturamento atual: ${faturamentoAtual}, Meta: ${meta}

---

üì¶ Regras de gera√ß√£o:

### 1. üìä Diagn√≥stico Estrat√©gico da Cl√≠nica
- Identifique os principais desafios e oportunidades baseado nos dados espec√≠ficos
- Analise o gap entre faturamento atual (${faturamentoAtual}) e meta (${meta})
- Use linguagem acess√≠vel, direta e emp√°tica
- Foque nos pontos que impedem o crescimento e nas oportunidades n√£o exploradas

### 2. üí° Ideias de Conte√∫do Humanizado (foco: TikTok, Instagram e YouTube Shorts)
- Crie 5 ideias ESPEC√çFICAS para esta cl√≠nica ${tipoClinica} de ${especialidade}
- Formatos priorit√°rios: Reels, v√≠deos curtos ou carrossel com rosto
- Conecte cada conte√∫do aos equipamentos: ${equipamentos}
- Exemplos de formato:
  * "Voc√™ sabia que [problema espec√≠fico] tem solu√ß√£o?" ‚Üí Reel com before/after
  * "3 sinais de que voc√™ precisa de [tratamento]" ‚Üí Carrossel educativo
  * "O que acontece durante [procedimento]" ‚Üí Reel de bastidores
- Nada de blogs, lives longas, webinars ou estrat√©gias B2B
- Conecte cada conte√∫do a um sentimento (autoestima, supera√ß√£o, dor comum)
- Use a linguagem: ${estilo}

### 3. üìÖ Plano de A√ß√£o de 3 Semanas
Baseado no perfil desta cl√≠nica, crie a√ß√µes espec√≠ficas e pr√°ticas:

**SEMANA 1:** Estrutura√ß√£o de conte√∫do
- 3 a√ß√µes pr√°ticas para ${especialidade}
- Foco em ${equipamentos}

**SEMANA 2:** Engajamento e autoridade  
- 3 a√ß√µes para conectar com ${publico}
- Estrat√©gias para ${estilo}

**SEMANA 3:** Convers√£o e crescimento
- 3 a√ß√µes para alcan√ßar meta de ${meta}
- Otimiza√ß√£o baseada nos resultados

### 4. üé® Avalia√ß√£o de Marca e Atendimento
Analise especificamente para esta cl√≠nica ${tipoClinica}:

**Identidade Visual:**
- Nome e logotipo: transparecem autoridade para ${especialidade}?
- Cores combinam com ${publico}?
- Coer√™ncia com ${estilo}?

**Experi√™ncia do Cliente:**
- Jornada tem acolhimento adequado para ${problemas}?
- Follow-up p√≥s ${equipamentos}?
- Programa de indica√ß√£o para ${publico}?
- Coleta de feedbacks e avalia√ß√µes p√∫blicas?

**Recomenda√ß√µes espec√≠ficas** para tornar a jornada mais encantadora e coerente.

### 5. üß© Enigma Sat√≠rico do Mentor
**Mentor identificado:** ${mentorSugerido}

Crie um enigma com trocadilho sutil usando APENAS O SOBRENOME do mentor (sem citar o nome completo), relacionado aos desafios espec√≠ficos desta cl√≠nica ${tipoClinica} de ${especialidade}.

Formato: "Marketing que converte ${problemas} vem de quem sabe [TROCADILHO COM SOBRENOME]..."

---

‚ö†Ô∏è Regras finais:
- Foco 100% no p√∫blico final (pacientes da cl√≠nica)
- Linguagem emocional, acess√≠vel, com inspira√ß√£o pr√°tica
- Resposta organizada com t√≠tulos, √≠cones e estrutura clara
- TODAS as 5 se√ß√µes s√£o obrigat√≥rias
- Use dados espec√≠ficos fornecidos, n√£o seja gen√©rico`;

  return prompt;
}

function formatEquipments(data: any): string {
  if (data.aestheticEquipments && Array.isArray(data.aestheticEquipments)) {
    return data.aestheticEquipments.join(', ');
  }
  if (data.medicalProcedures && Array.isArray(data.medicalProcedures)) {
    return data.medicalProcedures.join(', ');
  }
  return 'N√£o especificado';
}

function extractProblems(data: any): string {
  const problems = [];
  
  if (data.clinicType === 'clinica_medica') {
    const medicalProblems = {
      'dermatologia': 'Manchas, rugas, acne, envelhecimento da pele',
      'nutrologia': 'Sobrepeso, defici√™ncias nutricionais, metabolismo lento',
      'cirurgia_plastica': 'Insatisfa√ß√£o corporal, autoestima baixa, marcas do tempo',
      'ginecoestetica': 'Flacidez √≠ntima, ressecamento, baixa autoestima sexual',
      'medicina_estetica': 'Sinais de envelhecimento, flacidez, volume facial'
    };
    problems.push(medicalProblems[data.medicalSpecialty] || 'Problemas de sa√∫de e est√©tica');
  } else {
    const aestheticProblems = {
      'corporal': 'Gordura localizada, flacidez corporal, celulite',
      'facial': 'Rugas, manchas, flacidez facial, perda de volume',
      'depilacao': 'Pelos indesejados, foliculite, irrita√ß√£o da pele',
      'ambos': 'Problemas est√©ticos corporais e faciais'
    };
    problems.push(aestheticProblems[data.aestheticFocus] || 'Problemas est√©ticos');
  }
  
  return problems.join(', ');
}

function formatRevenue(revenue: string): string {
  const revenueMap = {
    'ate_15k': 'At√© R$ 15.000',
    '15k_30k': 'R$ 15.000 - R$ 30.000', 
    '30k_60k': 'R$ 30.000 - R$ 60.000',
    'acima_60k': 'Acima de R$ 60.000'
  };
  return revenueMap[revenue] || 'N√£o informado';
}

function formatGoal(goal: string): string {
  const goalMap = {
    'dobrar': 'Dobrar o faturamento',
    'crescer_50': 'Crescer 50%',
    'crescer_30': 'Crescer 30%',
    'manter': 'Manter estabilidade'
  };
  return goalMap[goal] || 'N√£o informado';
}

function inferBestMentor(data: any): string {
  // L√≥gica aprimorada para inferir o mentor baseado no perfil
  if (data.clinicType === 'clinica_medica') {
    if (data.medicalObjective === 'autoridade') {
      return '√çcaro de Carvalho (Storytelling e Autoridade M√©dica)';
    } else if (data.medicalObjective === 'escala') {
      return 'Pedro Sobral (Performance e Estrutura√ß√£o)';
    } else if (data.medicalObjective === 'diferenciacao') {
      return 'Washington Olivetto (Big Ideas e Criatividade)';
    } else {
      return '√çcaro de Carvalho (Comunica√ß√£o M√©dica Humanizada)';
    }
  } else {
    if (data.aestheticObjective === 'mais_leads') {
      return 'Leandro Ladeira (Convers√£o e Tr√°fego)';
    } else if (data.aestheticObjective === 'autoridade') {
      return '√çcaro de Carvalho (Storytelling e Posicionamento)';
    } else if (data.aestheticObjective === 'ticket_medio') {
      return 'Paulo Cuenca (Criatividade e Valor Agregado)';
    } else if (data.currentRevenue === 'acima_60k') {
      return 'Washington Olivetto (Branding Premium)';
    } else {
      return 'Camila Porto (Marketing Est√©tico Estruturado)';
    }
  }
}
