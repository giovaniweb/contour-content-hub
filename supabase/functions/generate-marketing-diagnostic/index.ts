
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  console.log('üöÄ CONSULTOR FLUIDA - Diagn√≥stico iniciado');
  console.log('üìù Method:', req.method);
  
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const diagnosticData = await req.json();
    console.log('üìä Dados do diagn√≥stico recebidos');

    if (!openAIApiKey) {
      console.error('‚ùå OPENAI_API_KEY n√£o configurada!');
      return new Response(JSON.stringify({ 
        error: 'OPENAI_API_KEY n√£o configurada',
        success: false 
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const prompt = createConsultorFluidaPrompt(diagnosticData);
    console.log('üìù Prompt do Consultor Fluida criado');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          { 
            role: 'system', 
            content: `üß† Voc√™ √© o CONSULTOR FLUIDA ‚Äî um estrategista de marketing altamente treinado para cl√≠nicas est√©ticas e cl√≠nicas m√©dicas.

Seu papel √© conduzir um diagn√≥stico inteligente com base nas respostas do usu√°rio, identificando o perfil da cl√≠nica, seus principais gargalos e oportunidades, e entregando uma resposta organizada com plano de a√ß√£o, ideias de conte√∫do, e previs√£o de crescimento.

‚öôÔ∏è Sua intelig√™ncia inclui:
- Classifica√ß√£o autom√°tica entre Cl√≠nica M√©dica üß™ e Cl√≠nica Est√©tica üíÜ‚Äç‚ôÄÔ∏è
- Diferencia√ß√£o entre equipamentos m√©dicos e est√©ticos
- Gera√ß√£o de conte√∫do pr√°tico para Instagram, TikTok e YouTube Shorts
- Linguagem adaptada ao perfil do usu√°rio (emocional, t√©cnica, humanizada‚Ä¶)
- Humor leve e enigm√°tico com refer√™ncia a mentores fict√≠cios

üîê REGRAS DE ACESSO IMPORTANTES:
- Se for CL√çNICA M√âDICA: pode sugerir TODOS os equipamentos (m√©dicos e est√©ticos)
- Se for CL√çNICA EST√âTICA: pode sugerir APENAS equipamentos est√©ticos
- NUNCA sugira equipamentos m√©dicos (CO2 Fracionado, Ultrassom microfocado, Intradermoterapia) para cl√≠nicas est√©ticas

‚ö†Ô∏è Regras de Conte√∫do:
- Nunca sugira conte√∫do complexo como blog, webinar ou live
- Sempre pense no cliente da cl√≠nica (n√£o no profissional)
- Use uma estrutura leve, fluida e inspiradora
- Nunca revele o nome do mentor
- Os t√≠tulos devem ser claros, com emojis, frases curtas e CTA
- Use somente Instagram, TikTok ou Shorts` 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0.85,
        max_tokens: 4000
      }),
    });

    if (!response.ok) {
      console.error('‚ùå OpenAI API error:', response.status);
      const errorText = await response.text();
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    const diagnosticResult = data.choices[0].message.content;
    console.log('‚úÖ Diagn√≥stico Fluida gerado com sucesso');

    return new Response(JSON.stringify({ 
      diagnostic: diagnosticResult,
      success: true 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('üí• Erro no Consultor Fluida:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro ao gerar diagn√≥stico com IA',
      success: false,
      details: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function createConsultorFluidaPrompt(data: any): string {
  const tipoClinica = data.clinicType === 'clinica_medica' ? 'M√©dica' : 'Est√©tica';
  const isClinicaMedica = data.clinicType === 'clinica_medica';
  
  // Dados b√°sicos da cl√≠nica
  const dadosBasicos = {
    tipo: tipoClinica,
    faturamentoAtual: formatRevenue(data.currentRevenue),
    metaCrescimento: formatGoal(data.revenueGoal),
    publicoIdeal: data.targetAudience || 'N√£o definido',
    estiloLinguagem: formatCommunicationStyle(data.communicationStyle),
    frequenciaConteudo: formatContentFrequency(data.contentFrequency),
    desafiosPrincipais: formatChallenges(data.mainChallenges)
  };

  // Dados espec√≠ficos por tipo de cl√≠nica
  let perfilClinico = '';
  if (isClinicaMedica) {
    perfilClinico = `
üß™ PERFIL CL√çNICA M√âDICA:
- Especialidade: ${data.medicalSpecialty || 'N√£o informado'}
- Procedimentos: ${data.medicalProcedures || 'N√£o informado'}
- Equipamentos m√©dicos: ${data.medicalEquipments || 'N√£o informado'}
- Tratamentos oferecidos: ${data.medicalTreatments || 'N√£o informado'}
- Protocolo mais vendido: ${data.medicalBestSeller || 'N√£o informado'}
- Ticket m√©dio: ${formatMedicalTicket(data.medicalTicket)}
- Modelo de vendas: ${data.medicalSalesModel || 'N√£o informado'}
- Objetivo principal: ${data.medicalObjective || 'N√£o informado'}
- Aparece em conte√∫dos: ${data.medicalContentFrequency || 'N√£o informado'}
- Estilo da cl√≠nica: ${data.medicalClinicStyle || 'N√£o informado'}`;
  } else {
    perfilClinico = `
üíÜ‚Äç‚ôÄÔ∏è PERFIL CL√çNICA EST√âTICA:
- Foco de atua√ß√£o: ${data.aestheticFocus || 'N√£o informado'}
- Equipamentos est√©ticos: ${data.aestheticEquipments || 'N√£o informado'}
- Promessas de tratamento: ${data.aestheticPromises || 'N√£o informado'}
- Protocolo mais vendido: ${data.aestheticBestSeller || 'N√£o informado'}
- Ticket m√©dio: ${formatAestheticTicket(data.aestheticTicket)}
- Modelo de vendas: ${data.aestheticSalesModel || 'N√£o informado'}
- Objetivo principal: ${data.aestheticObjective || 'N√£o informado'}
- Aparece em conte√∫dos: ${data.aestheticContentFrequency || 'N√£o informado'}
- Estilo da cl√≠nica: ${data.aestheticClinicStyle || 'N√£o informado'}`;
  }

  const prompt = `üß† CONSULTOR FLUIDA - Diagn√≥stico Inteligente

Analyze o perfil da cl√≠nica e gere um diagn√≥stico estruturado seguindo EXATAMENTE as se√ß√µes abaixo:

üì• DADOS DE ENTRADA:
${perfilClinico}

üìä DADOS FINANCEIROS E COMUNICA√á√ÉO:
- Faturamento atual: ${dadosBasicos.faturamentoAtual}
- Meta de crescimento: ${dadosBasicos.metaCrescimento}
- P√∫blico-alvo: ${dadosBasicos.publicoIdeal}
- Estilo de linguagem: ${dadosBasicos.estiloLinguagem}
- Frequ√™ncia de posts: ${dadosBasicos.frequenciaConteudo}
- Principais desafios: ${dadosBasicos.desafiosPrincipais}

---

üéØ RESPONDA COM AS SE√á√ïES ABAIXO (estrutura obrigat√≥ria):

## üìä Diagn√≥stico Estrat√©gico
[Analise o perfil da cl√≠nica, gargalos de comunica√ß√£o e posicionamento. Aponte se h√° desalinhamento entre imagem, tr√°fego e oferta. Adapte o tom ao tipo de cl√≠nica (m√©dica = autoridade; est√©tica = humaniza√ß√£o)]

## üí° Ideias de Conte√∫do Inteligente
[Crie 4 a 6 ideias de conte√∫do REAIS para o cliente final. Use somente Instagram, TikTok ou Shorts. Inclua pelo menos 1 conte√∫do com equipamento (se aplic√°vel). Tipos: bastidores, transforma√ß√£o, depoimento, skincare game, storytelling, d√∫vida comum. D√™ T√çTULO + explica√ß√£o + emoji]

## üìÖ Plano de A√ß√£o ‚Äì 3 Semanas
[
Semana 1: Visibilidade e autoridade
Semana 2: Prova social e conex√£o  
Semana 3: Convers√£o e fideliza√ß√£o
Para cada semana, gere 3 a√ß√µes pr√°ticas com CTA claros. Use linguagem adaptada ao perfil
]

## üß© Enigma Sat√≠rico do Mentor
[Crie uma frase final com tom misterioso e ir√¥nico, sem citar o mentor real. Exemplo: "Essa estrat√©gia parece coisa de quem vive no palco‚Ä¶ mas atua melhor nos bastidores. Sempre vendendo sem parecer que est√° vendendo."]

## üí∏ Proje√ß√£o de Crescimento
[
Mostre: Faturamento atual
Estime: Proje√ß√£o com o plano
Calcule: Crescimento potencial (ex: +40%)
Use o intervalo do simulador como base
]

---

üîê CONTROLE DE ACESSO:
- Tipo detectado: ${tipoClinica}
- ${isClinicaMedica ? 'PODE sugerir equipamentos m√©dicos E est√©ticos' : 'APENAS equipamentos est√©ticos (N√ÉO m√©dicos)'}
- ${!isClinicaMedica ? 'NUNCA mencione: CO2, HIFU, Laser Fracionado, Intradermoterapia' : ''}

‚ö†Ô∏è LEMBRE-SE:
- Foque no CLIENTE FINAL da cl√≠nica
- Conte√∫do apenas para Instagram/TikTok/Shorts
- Linguagem ${dadosBasicos.estiloLinguagem}
- Tom inspirador e pr√°tico`;

  return prompt;
}

// Fun√ß√µes auxiliares de formata√ß√£o
function formatRevenue(revenue: string): string {
  const map: { [key: string]: string } = {
    'ate_15k': 'At√© R$ 15.000/m√™s',
    '15k_30k': 'R$ 15.000 - R$ 30.000/m√™s',
    '30k_60k': 'R$ 30.000 - R$ 60.000/m√™s',
    'acima_60k': 'Acima de R$ 60.000/m√™s'
  };
  return map[revenue] || revenue || 'N√£o informado';
}

function formatGoal(goal: string): string {
  const map: { [key: string]: string } = {
    'crescer_30': 'Crescer 30% em 6 meses',
    'crescer_50': 'Crescer 50% em 6 meses',
    'dobrar': 'Dobrar em 1 ano',
    'triplicar': 'Triplicar em 1 ano',
    'manter_estavel': 'Manter estabilidade'
  };
  return map[goal] || goal || 'N√£o informado';
}

function formatCommunicationStyle(style: string): string {
  const map: { [key: string]: string } = {
    'emocional_inspirador': 'Emocional e Inspirador',
    'tecnico_didatico': 'T√©cnico e Did√°tico',
    'humanizado_proximo': 'Humanizado e Pr√≥ximo',
    'direto_objetivo': 'Direto e Objetivo'
  };
  return map[style] || style || 'N√£o definido';
}

function formatContentFrequency(freq: string): string {
  const map: { [key: string]: string } = {
    'diario': 'Diariamente',
    'semanal': 'Semanalmente',
    'quinzenal': 'Quinzenalmente',
    'mensal': 'Mensalmente',
    'raramente': 'Raramente',
    'nao_posto': 'N√£o posta'
  };
  return map[freq] || freq || 'N√£o informado';
}

function formatChallenges(challenges: string): string {
  const map: { [key: string]: string } = {
    'gerar_leads': 'Gerar leads qualificados',
    'converter_vendas': 'Converter leads em vendas',
    'fidelizar_clientes': 'Fidelizar clientes',
    'competir_preco': 'Competir sem baixar pre√ßo',
    'criar_conteudo': 'Criar conte√∫do relevante',
    'gestao_tempo': 'Gest√£o de tempo'
  };
  return map[challenges] || challenges || 'N√£o informado';
}

function formatMedicalTicket(ticket: string): string {
  const map: { [key: string]: string } = {
    'ate_500': 'At√© R$ 500',
    '500_1500': 'R$ 500 - R$ 1.500',
    '1500_3000': 'R$ 1.500 - R$ 3.000',
    '3000_5000': 'R$ 3.000 - R$ 5.000',
    'acima_5000': 'Acima de R$ 5.000'
  };
  return map[ticket] || ticket || 'N√£o informado';
}

function formatAestheticTicket(ticket: string): string {
  const map: { [key: string]: string } = {
    'ate_150': 'At√© R$ 150',
    '150_300': 'R$ 150 - R$ 300',
    '300_600': 'R$ 300 - R$ 600',
    '600_1000': 'R$ 600 - R$ 1.000',
    'acima_1000': 'Acima de R$ 1.000'
  };
  return map[ticket] || ticket || 'N√£o informado';
}
