import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Prompt base personalizado do usu√°rio com regras de seguran√ßa aprimoradas
const basePrompt = `Voc√™ √© um roteirista criativo e estrategista digital especializado em v√≠deos curtos para redes sociais (Reels e Stories), com foco em est√©tica, sa√∫de e tecnologia.

Sua miss√£o √© criar conte√∫dos com base nas seguintes metodologias:

üéØ 1. Estrat√©gia de Conte√∫do (Venda Todo Santo Dia com nomes intuitivos):

- üü° Atrair Aten√ß√£o ‚Äì chamar novos olhares com curiosidade e impacto
- üü¢ Criar Conex√£o ‚Äì gerar identifica√ß√£o e empatia
- üî¥ Fazer Comprar ‚Äì incentivar a√ß√µes e convers√µes
- üîÅ Reativar Interesse ‚Äì trazer de volta quem j√° viu algo
- ‚úÖ Fechar Agora ‚Äì dar o empurr√£o final para quem est√° pronto

üéûÔ∏è 2. Estrutura de Roteiro (modelo Disney):

- (Identifica√ß√£o) ‚Äì Um ponto em comum com o p√∫blico
- (Conflito) ‚Äì Algo que incomoda, trava ou preocupa
- (Virada) ‚Äì A solu√ß√£o revelada com emo√ß√£o
- (Final marcante) ‚Äì Uma frase forte ou reflexiva que fecha com impacto

üì¶ TIPOS DE SA√çDA PERMITIDOS:

1. BIG IDEA
üß† Big Idea: "Frase provocativa ou emocional que ativa desejo ou verdade inc√¥moda"
üìä Tipo de Conte√∫do: üü° / üî¥ / etc.
üìù Por que ela funciona: Explica√ß√£o curta e estrat√©gica
üéØ Gancho sugerido: Frase curta que pode abrir um Reels ou Story

2. ROTEIRO
Formato de sa√≠da:
Roteiro [n√∫mero]
Tipo de Conte√∫do: üü°/üü¢/üî¥/üîÅ/‚úÖ
üéØ Objetivo: ‚Ä¶
üß† T√≠tulo/Gancho: "..."
üé¨ Roteiro com estrutura Disney:
(Identifica√ß√£o)
(Conflito)
(Virada)
(Final marcante)
üì± Ideal para: Reels / Stories / Ambos
üó£ Tom de linguagem: respeite o estilo indicado no cadastro do equipamento

3. STORIES 10x
Formato de sa√≠da:
1. Ideia de Story: "Frase curta que prende aten√ß√£o"
üìπ Como gravar: Explica√ß√£o pr√°tica (ex: selfie direto, mostrar print, bastidor etc.)

‚öôÔ∏è INSTRU√á√ïES INTERNAS PARA GARANTIR PRECIS√ÉO:
- SEMPRE consulte APENAS os dados do equipamento fornecidos no prompt
- NUNCA invente tecnologias, recursos, funcionalidades, indica√ß√µes ou benef√≠cios que n√£o estejam explicitamente listados nos dados do equipamento
- MANTENHA clara separa√ß√£o entre: a tecnologia (o que o equipamento √©), as indica√ß√µes (para que problemas serve) e os benef√≠cios (que resultados proporciona)
- Certifique-se que seu roteiro √© 100% compat√≠vel com as informa√ß√µes do equipamento
- Use EXATAMENTE o tom de linguagem indicado no cadastro do equipamento
- Os roteiros devem soar como falas naturais e humanas
- Roteiros: at√© 40 segundos
- Big Ideas: impactantes e estrat√©gicas
- Stories 10x: com instru√ß√µes pr√°ticas

üö´ RESTRI√á√ïES IMPORTANTES:
- Nunca use a palavra "criofrequ√™ncia" em nenhum roteiro, t√≠tulo, Big Idea ou Story, independentemente do equipamento.
- Nunca atribua benef√≠cios ou resultados a um equipamento quando estes n√£o estiverem explicitamente listados em seus dados.
- Nunca sugira resultados ou promessas que n√£o estejam claramente descritos nos benef√≠cios do equipamento.
- Nunca sugira que um equipamento trata condi√ß√µes que n√£o estejam explicitamente listadas nas indica√ß√µes.

LEMBRE-SE: Sua credibilidade depende da precis√£o t√©cnica. Foque apenas nas informa√ß√µes fornecidas, sem extrapola√ß√£o ou inven√ß√£o.`;

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      console.error("OPENAI_API_KEY n√£o encontrado");
      return new Response(
        JSON.stringify({ error: 'OPENAI_API_KEY n√£o encontrado' }), 
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log("Edge function de GPT personalizado iniciada");
    
    // Parse request
    let requestData;
    try {
      requestData = await req.json();
      console.log("Dados recebidos:", JSON.stringify(requestData));
    } catch (parseError) {
      console.error("Erro ao processar JSON da requisi√ß√£o:", parseError);
      return new Response(
        JSON.stringify({ error: "Formato de requisi√ß√£o inv√°lido" }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    // Extrair par√¢metros da requisi√ß√£o
    const { 
      tipo, // 'bigIdea', 'roteiro', 'stories'
      equipamento, // Nome do equipamento
      quantidade = 1, // Quantidade de roteiros (default: 1)
      tom, // Tom desejado
      estrategiaConteudo, // üü° Atrair Aten√ß√£o, üü¢ Criar Conex√£o, etc.
      equipamentoData, // Dados do equipamento selecionado
      // Par√¢metros adicionais do modo avan√ßado
      topic,
      bodyArea,
      purposes,
      additionalInfo,
      marketingObjective
    } = requestData;
    
    if (!tipo || !equipamento) {
      return new Response(
        JSON.stringify({ error: 'Tipo e equipamento s√£o obrigat√≥rios' }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Verificar se temos os dados do equipamento
    if (!equipamentoData) {
      return new Response(
        JSON.stringify({ error: 'Dados do equipamento n√£o fornecidos' }), 
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Construir prompt espec√≠fico baseado nos par√¢metros com instru√ß√µes de seguran√ßa
    let userPrompt = '';
    
    userPrompt += `[DADOS DO EQUIPAMENTO - USE APENAS ESTAS INFORMA√á√ïES]:\n`;
    userPrompt += `Nome: ${equipamentoData.nome}\n`;
    userPrompt += `Tecnologia: ${equipamentoData.tecnologia}\n`;
    userPrompt += `Indica√ß√µes: ${equipamentoData.indicacoes}\n`;
    userPrompt += `Benef√≠cios: ${equipamentoData.beneficios}\n`;
    userPrompt += `Diferenciais: ${equipamentoData.diferenciais}\n`;
    userPrompt += `Linguagem recomendada: ${equipamentoData.linguagem}\n\n`;
    
    userPrompt += `[INSTRU√á√ïES DE SEGURAN√áA]:\n`;
    userPrompt += `- Use APENAS as informa√ß√µes acima. N√ÉO adicione, invente ou extrapole dados.\n`;
    userPrompt += `- N√ÉO misture tecnologia com indica√ß√µes ou benef√≠cios.\n`;
    userPrompt += `- Mantenha-se fiel aos dados do equipamento, sem "alucina√ß√µes" ou confabula√ß√µes.\n\n`;
    
    userPrompt += `Tipo de conte√∫do solicitado: ${tipo}\n`;
    
    // Adicionar par√¢metros b√°sicos do modo simples
    if (tipo === 'roteiro') {
      userPrompt += `Quantidade de roteiros: ${quantidade}\n`;
      userPrompt += `Tom desejado: ${tom || 'Use o tom indicado no cadastro do equipamento'}\n`;
      
      if (estrategiaConteudo) {
        userPrompt += `Estrat√©gia de conte√∫do: ${estrategiaConteudo}\n`;
        
        // Adicionar contextos espec√≠ficos para cada objetivo
        if (estrategiaConteudo === 'üü° Atrair Aten√ß√£o') {
          userPrompt += `Contexto do objetivo: Criar curiosidade, interromper o scroll, gerar clique\n`;
        } else if (estrategiaConteudo === 'üü¢ Criar Conex√£o') {
          userPrompt += `Contexto do objetivo: Gerar empatia, identifica√ß√£o, mostrar "por que voc√™"\n`;
        } else if (estrategiaConteudo === 'üî¥ Fazer Comprar') {
          userPrompt += `Contexto do objetivo: Destacar valor, diferencial, benef√≠cio, quebrar obje√ß√µes\n`;
        } else if (estrategiaConteudo === 'üîÅ Reativar Interesse') {
          userPrompt += `Contexto do objetivo: Resgatar contatos frios, leads antigos, pacientes inativos\n`;
        } else if (estrategiaConteudo === '‚úÖ Fechar Agora') {
          userPrompt += `Contexto do objetivo: A√ß√£o imediata, urg√™ncia, chamada para convers√£o direta\n`;
        }
      }
    } else if (tipo === 'bigIdea') {
      if (estrategiaConteudo) {
        userPrompt += `Estrat√©gia de conte√∫do: ${estrategiaConteudo}\n`;
        
        // Adicionar contextos espec√≠ficos para cada objetivo
        if (estrategiaConteudo === 'üü° Atrair Aten√ß√£o') {
          userPrompt += `Contexto do objetivo: Criar curiosidade, interromper o scroll, gerar clique\n`;
        } else if (estrategiaConteudo === 'üü¢ Criar Conex√£o') {
          userPrompt += `Contexto do objetivo: Gerar empatia, identifica√ß√£o, mostrar "por que voc√™"\n`;
        } else if (estrategiaConteudo === 'üî¥ Fazer Comprar') {
          userPrompt += `Contexto do objetivo: Destacar valor, diferencial, benef√≠cio, quebrar obje√ß√µes\n`;
        } else if (estrategiaConteudo === 'üîÅ Reativar Interesse') {
          userPrompt += `Contexto do objetivo: Resgatar contatos frios, leads antigos, pacientes inativos\n`;
        } else if (estrategiaConteudo === '‚úÖ Fechar Agora') {
          userPrompt += `Contexto do objetivo: A√ß√£o imediata, urg√™ncia, chamada para convers√£o direta\n`;
        }
      }
    } else if (tipo === 'stories') {
      userPrompt += `Tom desejado: ${tom || 'Use o tom indicado no cadastro do equipamento'}\n`;
      userPrompt += `Gere ${quantidade || 10} ideias para stories\n`;
    }
    
    // Adicionar par√¢metros avan√ßados
    if (topic) {
      userPrompt += `Tema/Assunto principal: ${topic}\n`;
    }
    
    if (bodyArea) {
      userPrompt += `√Årea do corpo a focar: ${bodyArea}\n`;
    }
    
    if (purposes && purposes.length > 0) {
      userPrompt += `Finalidades do tratamento: ${purposes.join(', ')}\n`;
    }
    
    if (additionalInfo) {
      userPrompt += `Informa√ß√µes adicionais: ${additionalInfo}\n`;
    }
    
    if (marketingObjective) {
      userPrompt += `Objetivo de marketing: ${marketingObjective}\n`;
      
      // Adicionar contextos espec√≠ficos para cada objetivo
      if (marketingObjective === 'üü° Atrair Aten√ß√£o') {
        userPrompt += `Contexto do objetivo: Criar curiosidade, interromper o scroll, gerar clique\n`;
      } else if (marketingObjective === 'üü¢ Criar Conex√£o') {
        userPrompt += `Contexto do objetivo: Gerar empatia, identifica√ß√£o, mostrar "por que voc√™"\n`;
      } else if (marketingObjective === 'üî¥ Fazer Comprar') {
        userPrompt += `Contexto do objetivo: Destacar valor, diferencial, benef√≠cio, quebrar obje√ß√µes\n`;
      } else if (marketingObjective === 'üîÅ Reativar Interesse') {
        userPrompt += `Contexto do objetivo: Resgatar contatos frios, leads antigos, pacientes inativos\n`;
      } else if (marketingObjective === '‚úÖ Fechar Agora') {
        userPrompt += `Contexto do objetivo: A√ß√£o imediata, urg√™ncia, chamada para convers√£o direta\n`;
      }
    }
    
    // Aqui definimos qual tipo espec√≠fico de sa√≠da queremos
    userPrompt += `\nPor favor, crie ${tipo === 'roteiro' ? quantidade : tipo === 'stories' ? (quantidade || 10) : 1} ${tipo}(s) para o equipamento ${equipamento} seguindo rigorosamente o formato especificado.`;
    
    userPrompt += `\n\n[IMPORTANTE]: Verifique se todo o conte√∫do que voc√™ gerou est√° baseado EXCLUSIVAMENTE nos dados do equipamento fornecidos. N√£o mencione benef√≠cios, tecnologias ou indica√ß√µes n√£o listados explicitamente.`;

    console.log("Enviando requisi√ß√£o para OpenAI com prompt aprimorado");
    
    // Chamar OpenAI API com temperatura reduzida para maior precis√£o factual
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: "gpt-4o", // Modelo mais avan√ßado para melhor qualidade
        messages: [
          { role: "system", content: basePrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.5 // Temperatura reduzida para maior precis√£o factual
      })
    });

    // Get response from OpenAI
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`Erro na resposta OpenAI: Status ${response.status}, Resposta: ${errorText}`);
      return new Response(
        JSON.stringify({ 
          error: `Erro na API OpenAI: Status ${response.status}`,
          details: errorText
        }), 
        { status: response.status, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    const data = await response.json();
    const content = data.choices[0].message.content;
    
    console.log("Resposta gerada com sucesso");
    
    return new Response(JSON.stringify({ 
      content, 
      tipo, 
      equipamento,
      promptUtilizado: userPrompt // Incluindo o prompt utilizado para refer√™ncia
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Erro na fun√ß√£o custom-gpt:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
